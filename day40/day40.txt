1.线程定义及特点
    1.线程也是多任务编程方法
    2.轻量级的进程，有运行状态，有生命周期，消耗计算机资源
    3.线程是进程的一部分，一个进程中可包含多个线程
    4.线程是系统分配内核的最小单位，进程是系统分配资源的最小内存
    5.多个线程之间独立运行，互不干扰
    6.一个进程内的所有线程共享进程资源
    7.线程的创建和删除消耗的系统资源远远小于进程
    8.线程也有自己独立的资源，栈空间、命令集、ID等

2.线程模块(threading)
    1.线程类：from threading import Thread 
    2.常用方法
        1.t = Thread(target, args, kwargs, name)
            功能：创建线程对象
            参数：name  线程名  默认为Thread-1
        2.t.start()：创建线程，自动运行线程函数
        3.join([timeout])：阻塞等待回收线程
    3.进程和线程
        1.进程：分支，还是属于某一个个体
        2.进程：分身，完全不同的两个个体

3.线程对象(t)属性
    1.t.name:线程名称
    2.t.setName('新名称'):设置名称
    3.t.getName()
    4.t.is_alive()
    5.t.daemon = True :设置守护线程，主线程退出，分支线程结束，不要和join()一起使用
    6.t.setDaemon(True/False)

4.自定义线程类
    1.继承Thread类
    2.添加自己的__init__()属性，加载父类__init__()
    3.重写run()方法
    4.创建线程对象（自己的类），调用start()会自动执行run()方法

5.线程间通信
    1.进程间通信：内存（中间介质，1个存，1个取）
    2.线程间通信：使用进程空间的全局变量（线程共享进程的资源）
    3.产生的问题：共享资源争夺，

    1.共享资源（临界资源）：多个线程都可以操作的资源
    2.临街区：指一段代码，操作临界资源的代码
    3.同步：一种合作关系，为了完成任务，多个进程或者线程之间形成的一种协调调度，按照必要的步骤有序执行一系列操作（管道、消息队列通过阻塞自动实现同步）
    4.互斥：一种制约关系，一般通过上锁实现，当一个进程或者线程使用临界资源时，进行加锁处理，此时另外一个进程或者线程无法操作，直到解锁后才可操作

7.线程同步互斥方法
    1.线程锁（Lock）
        1.from threading import Lock
        2.lock = Lock()
        3.lock.acquire()    timeout=1,超时处理
        4.lock.release()
        5.with lock:
            ....
    2.事件(Event)
        1.事件方法
            1.e = Event()
                功能：创建事件对象
                状态：2种状态，未设置(默认)、被设置
            2.e.wait([timeout])
                功能：如果e是未设置，则阻塞
                     如果e是被设置，则不阻塞
            3.e.set()
                功能：将e变为被设置状态(wait()不阻塞)
            4.e.clear()
                功能：将e变为未设置状态
            5.e.is_set()
                功能：判断e的状态，True(被设置)、False

8.GIL(全局解释器锁)
    1.全局解释锁，为线程的通行证，仅此一个，拿到通行证的线程可以执行，所以在同一时刻，只能解释执行一个线程，降低了Python多线程的执行效率
    2.Python多线程一般用在大量的I/O阻塞存在，或者高延迟的程序中，而在CPU密集的程序中，使用多进程
    3.GIL建议
        1.尽量使用多进程完成并发
        2.不使用c作为解释器没有GIL问题，java、c#
        3.使用多阻塞方案完成并发
        4.修改c解释器

9.多线程和多进程测试
    1.多线程执行CPU密集程序测试
    2.多进程执行CPU密集程序测试
    3.多线程执行I/O密集程序测试
    4.多进程执行I/O密集程序测试

10.死锁
    1.定义：两个或多个进程/线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，他们都无法进行下去，此时称系统处于死锁状态

11.进程线程总结
    1.线程GIL问题：全局解释器，导致Python线程效率低，提高效率用多进程，但是资源消耗高
    2.进程和线程的区别和联系
        1.两者都是多任务编程方式，都能够利用计算机内核，都是动态运行的过程，占有计算机资源
        2.进程的创建和删除消耗资源要高于线程
        3.一个进程可以包含多个线程
        4.进程空间独立，数据互不干扰，有专门的IPC（进程间通信），线程使用全局变量通信
        5.多个线程共享进程的全局资源，资源操作时往往需要同步互斥方法
        6.进程线程在系统中都有特有的属性，如ID、代码段等
    3.使用场景
        1.Python中使用进程的时候多，因为线程有GIL
        2.一个任务包含多个分支任务，且需要消耗资源少用线程
        3.不同的独立任务，需要空间独立（方便资源使用管理）多用进程
        4.IO多时，可选择多线程或者多进程+IO多路复用

























