
异常 exception:
    try-except语句
    try-finally语句

    try-except语句的语法：
        try:
            可以出发异常的语法
        execpt 错误类型1 [as 变量名1]：
            异常处理语句1
        execpt 错误类型2 [as 变量名2]：
            异常处理语句2
        execpt (错误类型3, 错误类型4, ...) [as 变量名1]：
            异常处理语句3
        ...
        execpt:
            异常处理语法
        else:
            未发生异常语句
        finally:
            最终语句
    作用：
        尝试捕获异常，得到异常通知，将程序有异常流程转为正常流程并继续执行

    说明：
        as 子句是用于绑定错误对象的变量，可以省略
        execpt 子句可以有一个或多个，但至少有一个
        except: 子句必须放在所有execpt之后
        else 子句最多只能有一个，也可以省略不写
        finally 子句最多只能有一个，也可以省略不写

    说明2：
        else 子句在try中没有发生任何异常时被执行
        finally 子句中的语句无论在异常还是正常情况下都会被执行



    try-finally 语句：
        try:
            可能触发异常的语句
        finally:
            最终语句
        说明：
            finally子句不可以省略
            一定不存在execpt子句
        作用：
            通常用try-finally语句来做触发异常时必须要处理的事情，无论异常是否发生，finally子句都会被执行
        注：
            try-finally语句不会改变程序的正常/异常状态


raise语句：
    作用：  
        触发一个错误，让程序进入异常状态
        发送错误通知给调用者
    语法：
        raise 异常类型
        或
        raise 异常对象
        或
        raise  #生成上次的错误,并且只能放在try-execpt语句的execpt子句中


assert 语句：
    assert 真值表达式，错误数据（通常为字符串）
    当真值表达式为假时，用错误数据创建一个AssertionError类型的错误，并进入异常状态
    通常用来在编写代码时，故意抛出异常来发现错误
    等同于:
        if bool(真值表达式) == False:
            raise AssertionError 
    

迭代器 Iterator
    用来访问可迭代对象的工具
    迭代器是指用iter(obj) 函数返回的对象
    迭代器可以用next(it) 函数获取可迭代对象的数据
    函数：
        iter(iterable) 从可迭代对象中返回一个迭代器， iterable必须是一个能提供一个迭代器的对象
        next(Iterator)  从迭代器iterator中获取下一个数据，如果无法获取下一行数据，则触发StopIteration异常
    说明：
        迭代器只能望前取值，不能后退
        用iter函数可以返回一个可迭代对象的迭代器





























































































