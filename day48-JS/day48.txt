1.Javascript 概述
    1.浏览器解释型语言，嵌套在HTML页面中，交给浏览器自动解释和执行
    2.作用：
        实现用户的交互(鼠标或键盘操作)，实现页面动态效果（轮播图，下拉菜单），小游戏制作
    3.组成：
        1.核心语法（ECMAScript）
        2.BOM（Browser Object Model）浏览器对象模型
        3.DOM（Document Object Model）文档对象模型
        4.自定义对象

2.JS 使用
    1.元素绑定事件
        事件：用户的行为
        事件处理函数：对应用户的行为，JS中所作的操作
        固定的事件名称：onclick(单击事件)
        语法：
            将事件名称以标签属性的方式绑定到元素上
            <标签名 onclick="JS代码">
        JS语句：
            alert("提示信息"); 出现弹框
            console.log("输出信息"); 控制台输出
    2.文档内嵌
        借助<script type="text/javascript"></script>标签，在标签中书写JS代码，可以书写任意多次，可以书写在任意位置，但是不同的位置会影响页面运行的结果


    3.文档外链
        借助<script src="JS文件路径"></script>
        JS语句： 
            1.console.log();
            2.alert();   
            3.prompt(""); 带有输入框的弹框，可以接受输入
            4.document.write(""); 在文档中动态写入内容，可识别HTML标签
                注意：
                    1.方法的书写位置决定了在body中的添加位置
                    2.如果采用元素事件绑定的方式在页面中添加内容,document.write("");会造成页面重写 

    4.JS调试
        当代码编写出现错误时，在运行的时候，在错误位置会停止碰到错误代码，会终止当前语句块的执行，但不影响后续块的执行



3.JS 语法规范
    1.JS语句是由变量，常量，运算符，关键字，函数等组成
    2.JS语句可以使用;作为结束的标志
    3.JS严格区分大小写，标点一律使用英文
    4.JS中注释
        // 单行注释
        /* 多行注释 */ 

4.变量与常量
    1.变量 
        1.变量指在程序运行过程中随时可以被修改的数据
        2.创建语法
            使用var关键字声明变量
            语法1：
                var 变量名;  //声明变量
                变量名 = 值;  //变量赋值
            语法2：
                var 变量名 = 值;  //声明并赋值
            语法3：
                多个变量的声明
                var a,b,c;  //同时声明a,b,c三个变量
                var a=10,b=20,c=30;  //同时声明三个变量并赋值
        3.使用注意
            1.使用声明未赋值的变量，变量的值是undefined
            2.变量未声明，未赋值，直接使用会报错
            3.变量省略var关键字声明，直接赋值、使用时注意变量的作用域，一旦省略var，变量为全局变量
            4.变量的命名规范
                1.变量名自定义，可以由数字，字母，下划线，$组成，禁止以数字开头
                2.变量名区分大小写，尽量见名知意，多个单词组成的变量名，采用小驼峰表示
                3.禁止与JS的关键字或保留字冲突
                    var class function for while do break continue this if else return let name ...
    2.常量
        1.常量指一经定义就不能修改的数据，强制修改会报错
        2.创建 
            使用 const 声明常量
            注意：必须声明的同时赋值
                例：const PI = 3.14;  //常量名采用全大写，用于区分变量名
            注：保留n位小数位用方法 toFixed(n)

    3.变量的使用
        1.为变量赋值 - SET操作
            只要变量出现在赋值符号(=)的左边一律是赋值操作
        2.获取变量的值 - GET操作
            只要变量没有出现在赋值符号（=）的左边，一律是取值操作
5.数据类型
    1.简单数据类型（基础数据类型）
        1.number 数值类型
            1.整数
                1.十进制表示 var a = 100;
                2.八进制表示，八进制以0位前缀  var b = 010;  ---> 8
                3.十六进制表示，十六进制以0x为前缀  var c = 0x35; ---> 53
                4.注意：不管用哪一种进制表示，在控制台输出时，都会转换成十进制表示
            2.小数
                1.小数点表示法
                2.指数计数法
                    var a = 1.5e3;  ---> 1500
        2.string 字符串类型
            1.字符串由一个或多个字符组成，使用引号表示，每一位字符都有对应的Unicode编码
            2.创建 
                var s = "hello";
            3.方法 
                1.查看指定字符对应的Unicode码
                    方法：charCodeAt(index)
                    参数：index表示指定字符的下标，字符串在存储时，会自动为每一位字符分配下标，从0开始
                    使用：
                        s.charCodeAt(1);
                2.已知中文的Unicode码，转换字符显示
                    中文字符在计算机中采用十六进制存储
                    方法：toString(16);  //将Unicode码转换成16进制
                        添加\u 转义，识别中文
                    注意：
                        添加转义字符时，不能使用+拼接字符串，语法错误
                3.中文范围
                    "\u4e00" ~ "\u9fa5"
                4.转义字符
                    \t  制表符
                    \n  换行
                    \\  表示\
                    \"  表示"
                    \'  表示'
        3.Boolean 布尔类型
            布尔类型的值只有真和假 true/false
            表示条件判断的结果，可以与number转换
            true = 1;
            false = 0;
        4.undefined 
            1.变量声明未赋值，默认值就是undefined
            2.访问对象不存在的属性，返回undefined
        5.null 
            空类型，一般复杂数据类型需要解除引用时可以给null
    2.复杂的数据类型（引用类型）
        数组对象 函数 自定义对象
    3.检测数据类型
        JS是动态类型的语言，声明变量时只需要使用var关键字，不做数据类型区分，存储时或数据运算时，会内部按照number/string/boolean/对象类型区分
        运算符：typeof ();
        例： var a = 100;  typeof a;   or    type (a);

6.数据类型转换
    不同数据类型的数据进行计算，需要转换数据类型
    1.自动类型转换（隐式类型转换）
        1.字符串与其他类型的数据使用 + 连接，永远表示字符串的拼接，返回字符串结果
            转换原则：将非字符串类型自动转换为字符串，做拼接
        2.number + boolean
            转换：将布尔类型转换成number进行数学运算
            特殊：
                var res3 = 10 + undefined;  ---> NaN( not a number)
                var res4 = 10 + null;  ---> 10
            注意：  
                undefined无法转换为number,转换结果为NaN，NaN与其他数据类型做数学运算时，结果全为NaN
                null转换number时，转换为0，不影响运算
        3.Boolean + Boolean
            布尔类型会自动转换为number做数学运算
    2.强制类型转换
        1.转换字符串类型
            方法：toString()
            作用：将任意类型的数据转换成字符串
            使用： 
                var a = 100;
                var a1 = a.toString();
        2.转换Number(param)
            1.Number(param)
                参数：需要进行转number的数据
                返回：转换number之后的结果，转换失败返回NaN
            2.parseInt(param)
                参数：需要解析number的数据
                作用：从数据中解析整数部分并返回
                过程：
                    1.如果参数为非字符串类型，会自动转换为字符串
                    2.对每一位字符都进行转number的操作，如果当前位对应的字符转换失败，则停止向后解析，直接返回
            3.parseFloat(param)
                参数：需要解析number的数据
                作用：从数据中解析整数和小数部分并返回

7.运算符 
    1.赋值运算符：
        将右边的值赋给左边变量
    2.算数运算符（数学运算符）
        + - * / %(加减乘除 取余)
        1.所有涉及字符串类型参与的+运算，一律为字符串拼接，返回字符串结果
        2.除+外，其他运算符进行运算时，一律将操作数转换为number进行计算
    3.复合运算符
        += -= *= /= %=
    4.自增和自减运算符
        ++      --
        1.变量使用自增或自减运算符，表示在自身基础上进行 +1 或 -1 操作
            注意：
                1.自增和自减是对变量值得操作，非number类型的数据会先转换number，再进行值得+1操作
                2.单独与变量结合使用时，做前缀与后缀没有区别
        2.与其他运算符结合使用时，做前缀和后缀有区别
            以赋值运算符为例：
                var r = a ++; 做后缀时，变量先与其他运算符结合，再自增
                var r = ++ a; 做前缀时，变量先自增，再与其他运算符结合
    5.关系运算符（比较运算符）
        >   >=  <   <=  ==  !=  ===(全等/恒等)  !==(不全等)
        1.比较运算符用来判断表达式之间的关系，结果为布尔类型，true/false
        2.分类
            1.number 与其他数据类型的比较
                1.将非number类型自动转换为number进行值比较
                2.如果转换失败，变成number与NaN的比较，NaN与任意类型数据比较，结果都为false
            2.字符串之间的比较
                1.字符串之间比较，不再进行数据类型转换，而是比较Unicode编码
                2.从左向右依次比较每一位字符的Unicode编码，当前位编码值比较出结果，则返回，如果当前位编码值相同则向后比较下一位
        3.相等与恒等
            1.相等：包含自动数据类型转换，只要值相等，返回true
            2.恒等：不包含自动数据类型转换，严格比较数据类型与值，只要类型一致值相等，才返回true
        4.isNaN(变量):用于判断是否为非数字，如果是为true,不是数字，返回值为false，则是数字

    6.逻辑运算符
        1.用来判断多个条件之间的关系
        2.分类
            1. && 逻辑与
                连接两个条件表达式，只有同时成立，最终结果才为真
                （全1则1）
                例： 
                    a > 1 && a < 10;  要求两个条件同时成立才为真
                用法：可用作商品打折 ---  条件&&（操作）
            2. || 逻辑或
                只要有一个表达式成立，最终结果即为真
                （有1则1）
                用法：可用作设置默认值 ---  值1 || 默认值
            3. ! 逻辑非
                对结果取反
                非真即假，非假即真
                例： 
                    !(5>3); --> false










