1.流程控制  
    1.书序结构
    2.分支结构
    3.循环结构
        1.控制代码的重复执行
        2.循环的三要素
            循环条件
            循环体
            循环变量
        3.分类：
            1.while 循环
                语法：
                    定义循环变量;
                    while(循环条件){
                        //条件成立时执行循环体
                        //更新循环变量
                    }
            2.do-while 循环 
                语法： 
                    定义循环变量 
                    do{
                        循环体
                        更新循环变量 
                    }while(循环条件);
                执行流程：
                    1.定义循环变量 
                    2.执行循环体，更新循环变量
                    3.判断循环条件，成立则重复执行循环体，不成立则退出循环体
            3.for 循环 
                语法： 
                    for(循环变量;循环条件;更新循环变量){
                        循环体
                    }
                例：
                    for(var i = 1; i <= 100; i++){
                        console.log(i);
                    }
            4.循环控制 
                1.break
                    跳出循环体，结束循环，后面的代码不再执行
                2.continue
                    结束当前循环，开始下一次循环
            5.循环嵌套
                在循环体中嵌套使用另外一个循环

2.函数
    1.语法 
        1.声明函数，封装代码段
            function 函数名 (参数列表){
                函数体
                return 返回值；
            }
        2.调用函数，执行函数体
            函数名（实际参数）;
    2.使用 
        1.声明函数，只是保存一段代码，并不执行；只有函数被调用才会执行代码段
        2.函数名尽量见名知意，命名规范参考变量；普通函数名都以小写字母开头。  
        3.区分形参和实参；函数声明时定义的参数列表为形式参数；函数调用时传入实际参数参与运算，多个参数之间使用逗号隔开
        4.return关键字用于将函数内部的结果返回给外界，只能返回一个值，并且return后面的代码都不执行；可以不给值，只给关键字，控制函数体代码的执行
    3.其他声明和使用方式
        1.通过变量保存匿名函数
            例：
                var fn = function (a){};
                fn(a);
        2.匿名函数自执行
            语法： 
                (function(a,b){})
    4.变量的作用域
        1.全局作用域 -> 全局变量
            1.在函数外部定义的变量都是全局变量，在程序的任意位置都可以访问和修改
            2.所有省略var关键字定义的变量都是全局变量
        2.局部作用域 -> 局部变量
            1.在函数内部使用var关键字定义的变量都是局部变量，只能在当前函数体中访问，外界无法使用
            2.函数的形式参数，都是局部变量
        3.作用域链
            如果局部作用域中出现与全局(外层)作用域中同名变量，参考就近原则，从内层作用域向外查找
    5.局部函数
        将函数声明在某个函数的内部，就是局部函数
    6.全局函数
        ECMAScript预定义的全局函数，可供用户直接使用
        1.parseInt();
        2.parseFloat();
        3.Number();
        4.isNaN();
        5.encodeURI();
            例：var uri = 'https://www.baidu.com/s?wd=佳能';
                uri = encodeURI(uri);
            作用：使不符合URI规范的字符串转换成符合规范的字符串
        6.decodeURI()
            作用：对已编码的URI进行解码（将已编码内容再转换回中文）
        7.encodeURIComponent()
            作用：在 encodeURI 基础上，允许将特殊符号(:,/,...)进行编码
        8.decodeURIComponent()
        9.eval()
            作用：计算并执行以字符串方式表示的JS代码
            var msg = 'console.log("hello world");';
            eval(msg);

3.内置对象
    1.对象是由属性和方法组成的
    2.数组 Array
        1.创建方式
            1.使用[]表示数组结构
                数组可以用来存储一组数据（不限类型）
                语法：
                    var arr1 = [];
                    var arr2 = [10,"20",true];
            2.使用new关键字创建数组
                语法：
                    var arr3 = new Array();
                    var arr4 = new Array(1,2,3);
                    var arr5 = new Array(5); //定义一个初始长度为5的数组
                注意：
                    类就是图纸
                    对象称为实例
                    实例化创建对象的过程就是将抽象变具体的过程
        2.操作数组元素
            1.数组会自动为每一个分配下标，从0开始；可以根据下标操作数组元素
            2.数组长度是可以动态修改的
            语法： 
                arr[下标] = 10;
        3.遍历数组元素
            1.数组属性：length
                arr.length
                表示数组中元素个数，数组长度，设置为0，表示清空数组
            2.遍历：
                1.普通遍历
                    for(var i = 0; i < arr.length; i++){
                        console.log(arr[i]);
                    }
                2.快速for循环 for-in
                    语法：
                        for(var index in arr){
                            console.log(arr[index]);
                        }
            3.往最新的位置插入数据
                arr[arr.length] = ...

4.递归调用
    1.递归的实现
        1.边界条件
        2.递归前进 - 继续调自己
        3.递归返回 - 向上返回数据








 















