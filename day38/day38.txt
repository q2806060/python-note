1.multiprocessing 模块创建进程
    1.导入模块
    2.将需要执行的进程事件封装为函数
    3.使用Process类生成进程对象，并关联相关的函数
    4.通过进程对象启动进程（start()），自动执行进程的函数
    5.回收进程（join([timeout])），超过时间，解除阻塞（避免产生僵尸进程）
    注：模块没有提供标准输入接口（不能用input()函数）

2.Process 类
    1.功能：创建进程对象
    2.参数：
        1.target=函数名(必选)
        2.name='进程名'   默认：Process-1
        3.args=(元组)    元组传参（按位置给target函数传参）
        4.kwargs={字典}  字典传参（按键值对给target传参）

3.Process 创建子进程
    1.同样子进程复制父进程

4.多进程
    1.父进程：负责创建进程，回收进程
      子进程：各自执行各自的功能函数
    2.multiprocessing 中父进程更方便创建多个子进程执行多个事件，父进程往往将事件交由子进程去完成

5.进程中函数的传参
    1.元组传参：args=()
    2.字典传参：kwargs={}

6.创建的进程对象属性
    1.p.name : 进程名称
    2.p.pid : 进程PID号
    3.p.is_alive() : 进程状态(True/False)
    4.p.daemon : 守护进程，默认False，即主进程结束，不影响子进程，设置为True，主进程退出，子进程全部结束
        注：设置为True时，不能与join()函数一起用
    
7.自定义进程类
    1.使用情况：使用类将一系列的功能进行封装，完成比较复杂的功能
    2.使用流程：
        1.创建类（继承Process）
        2.编写自己的__init__()函数 
        3.重写run方法，完成功能的逻辑调用（名字不能变）
        4.创建实例化对象
        5.调用start()函数创建新进程
        6.调用join()函数回收进程

8.进程池
    1.多进程的优缺点
        1.优点：利用多核资源，同时执行多任务，提高效率
        2.缺点：进程创建和删除，需要消耗较多的系统资源，大量进程频繁创建和删除会给系统带来压力
    2.进程池
        1.产生原因：应对大量任务需要多进程完成，需要频繁创建和销毁进程的情况
        2.原理：创建一定量的进程作为进程池，用来处理事件，事件处理完成后进程不退出，而是继续等待处理其他事件，直到所有待处理事件处理完成后统一销毁，增加了进程的重复利用，降低资源消耗
    3.使用流程 
        1.创建进程池，放入适量数量的进程
        2.将要做的事情封装成函数，放入进程池等待队列
        3.进程池中的进程不断执行任务，直到全都被执行
        4.关闭进程池，回收进程
    4.常用的方法
        1.类名： from multiprocessing import Pool
        2.Pool(processes=num)  创建并指定进程池内等待进程的数量，默认为计算机CPU核数
        3.向进程池内添加任务的方法
            1.apply_async(func, args, kwds)
                功能：放入要执行的事件函数(异步)
                返回值：返回函数事件对象，用get()方法获取结果
            2.apply(func, args, kwds)
                功能：放入要执行的事件函数(同步)
            3.map(func, iter)
                iter为可迭代对象，为func传参
                返回值：列表
        4.close() : 关闭进程池，无法再添加新任务
        5.join() : 阻塞，等待回收进程池






















































