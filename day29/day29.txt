1.I/O 模型
    I/O的类型：
        1.阻塞I/O 
            应用程序在发出某个函数调用后，等待造作系统内核返回结果，才能执行后面的代码，这个过程称为阻塞
            阻塞产生的原因：
                程序等待某种条件、状态
                处理I/O的时候，需要一定的时间
        2.非阻塞I/O 
            当程序发出I/O操作时，如果内核中数据没准备好（需要的条件没达成），不会阻塞，而是返回一个error
            特点：
                防止程序一直阻塞在某个I/O上
            超时：
                某些操作在等待一定时间后，如果没有结果，程序主动放弃等待
2.I/O 多路复用（select, poll, epoll）
    一个进程（程序）监视多个I/O设备，当这些I/O上有可读写事件（处于I/O就绪状态），程序对I/O事件进行处理（读、写、异常），处理结束，等待下次I/O事件 
    优点：
        能够避免一个I/O造成长时间的堵塞
    多路复用I/O也属于阻塞I/O 
    I/O多路复用的实现方式：
        select:
            windows, linux/Unix
            功能：监控（关注）多个I/O，如果某个I/O处于就绪状态，则立即返回，通知应用程序
            格式：rs, ws, xs = select(rlist, wlist, xlist[, timeout])
            参数：  rlist:可读的I/O列表
                   wlist:可写的I/O列表
                   xlist:需异常处理的I/O列表
                   timeout:超时事件，可选
            返回值：rs：rlist中准备就绪的I/O列表（可进行读操作）
                   ws:wlist中准备就绪的I/O列表（可进行写操作）
                   xs:xlist中准备就绪的I/O列表（需要进行异常处理）
            注意：若wlist中有I/O事件，select会立即返回
                 在处理I/O事件过程中，避免一个客户端长时间占用服务器或死循环的情况
                 
        poll:阻塞，并等待关注I/O列表的事件发生
            格式：events = p.poll()
            说明：p为poll对象
            返回值： events   列表
                    元素是一个个元组  ----->   （fileno, event） 文件描述符， 就绪事件
            linux/Unix
            poll和select原理一样，监控多个I/O的状态，并返回给应用程序
            poll监控的文件描述符数量没有限制
            事件：
                POLLIN  表示I/O的读事件
                POLLOUT 表示I/O的写事件
                POLLRR  表示I/O的异常事件
                POLLHUP 表示I/O被断开
                POLLNVAL无效请求
            主要函数：
                register:将I/O加入到关注列表
                格式：register(fd, [eventmask])
                参数：fd   I/O的文件描述符
                     eventmask  监测/关注的事件
                例如：register(fd, POLLIN)   ----->    表示关注fd的读事件
                     register(fd, POLLIN|POLLOUT) ------> 表示关注fd的读、写事件
        epoll:
            linux/Unix
            是poll的改进版，针对数量较多的I/O情况性能更好
            在获取事件的时候，不需要遍历所有被金控的I/O，只需遍历产生了事件被唤醒的那部分
            提供了更丰富的触发机制
                1.水平触发：当I/O上有事件的时候，epoll会发出事件通知，如果I/O上无操作，下次调用epoll时，还会进行通知
                2.边缘触发：当I/O上有事件发生时，只通知一次，就算是I/O事件没有被处理，直到再次出现事件的时候才通知
            使用：只需将poll对象的函数改成epoll即可


3.HTTP 协议
    1.HTTP：超文本传输协议
    2.功能：用来在HTTP服务器和客户端之间传输超文本文件
    3.特点：
        1.简单、快速
        2.灵活：支持传输任意类型的文件
            Content-Type 用来表示正在传输的文件类型
        3.无状态：对于事务处理没有记忆功能，如果下一次处理需要上一次的数据，必须要对这些数据重新传输（这样会导致数据传输量增大）
        4.无连接：HTTP1.0中，每个连接只处理一个请求；HTTP1.1中，可以设置长连接/短连接
            短连接：用一次就关闭
            长连接：连接一次，多次
    4.格式
        请求：
            请求行（位于请求包第一行）
                GET/HTTP/1.1
                说明：  GET  请求种类
                       /    请求的资源
                       HTTP/1.1 协议版本号
                主要请求类型：
                    GET     从服务器获取资源
                    POST    向服务器提交数据
                    PUT     更新服务器资源
                    DELETE  删除资源
                    HEAD    获取相应的协议头，通常用来测试连通性
            请求头：存放数据包的描述信息
                以键值对的格式对信息进行具体描述
            请求体：请求头和请求体之间
                用一个空行分隔
                数据中表现为两个连续'\r'n'
        响应：由状态行、消息头、响应正文
            状态行：HTTP/1.1  200 OK
                HTTP/1.1    协议版本号
                200         响应码，处理成功
                OK          响应信息
                响应码：3位，分类
                    1**     提示信息，表示请求已接收
                    2**     处理成功
                    3**     需要重定向
            消息头：存放响应数据包的描述信息
            响应正文：
            
4.本地套接字
    1.功能：用于客户端、服务器位于同一台机器上的通信
    2.API接口和网络套接字一样
    3.与网络套接字的差异
        1.创建套接字，使用AF_UNIX（本地套接字）
        2.地址类型：是本地文件路径，而不是IP：port网络套接字路径
    4.注意：创建的文件套接字路径会持久保存，服务器退出的时候不会删除，所以，启动服务器之前需要手动删除


5.struct:结构化数据
    原理：将数据转化为bytes格式或将bytes格式转换为原数据类型
    主要函数：
        pack：将数据转化为字节序列
        格式：pack(fmt, v1, v2, ...)
        参数：fmt   指定数据格式
             v1,v2...   要参与转换的数据
        返回值：返回转换后的bytes序列
        unpack:将字节序列按照特定的格式解析出原数据
        格式：unpack(fmt, bytes)
        返回值：返回一个元组
    格式的表示方式：
        整形        i 
        浮点型      f 
        浮点型      ns  (n表示长度)
    
6.账户管理系统
    1.三部分
        1.客户端：发起请求，显示结果
        2.服务器端：处理客户端请求，处理业务逻辑
        3.数据库：数据存储，增删改查

















































