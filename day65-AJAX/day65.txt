1.AJAX
    1.Asynchronous Javascript And Xml
        同步访问：当客户端向服务器发送请求时，服务器在处理的过程中，浏览器只能等待，效率较低
        异步访问：当客户端向服务器发送请求时，服务器在处理的过程中，客户端浏览器可以做其他的操作，不需要一直等待

        AJAX优点：
            1.异步 访问 
            2.局部 刷新
        使用场合：
            1.搜索建议
            2.表单验证
            3.前后端完全分离
2.AJAX核心对象 - 异步对象(XMLHttpRequest)
    1.简称为 xhr 
        称为'异步对象'，代替浏览器向服务器发送异步的请求，并接收响应
        xhr 是由JS来提供的
    2.创建异步对象 - xhr
        主流的异步对象是XMLHttpRequest 类型的(W3C)
        主流的浏览器全部支持XMLHttpRequest
        但在IE低版本中就不支持XMLHttpRequest，需要使用ActiveXObject 来创建异步对象
        var xhr = new XMLHttpRequest();
        var xhr = new ActiveXObjest("Microsoft.XMLHTTP");
3.xhr 的成员
    1.方法 - open()
        作用：创建请求
        语法：xhr.open(method,url,async)
            1.method
                请求方式，取值 "get" 或 "post"
            2.url 
                请求地址，取值为字符串
            3.async  
                是否采用异步方式发送请求
                true:使用异步方式
                false:使用同步方式
    2.属性 - readyState
        作用：xhr的请求状态，通过不同的请求状态来表示xhr与服务器的交互状况，由0-4共5个值来表示5个不同的状态
        状态：
            0：请求尚未初始化
            1：xhr已经与服务器建立连接
            2：服务器端已接收请求
            3：服务器正在处理请求
            4：响应已经完成
    3.属性 - status
        作用：服务器端的响应状态码
            200：服务器正确给出所有响应
            404：请求资源不存在
            500：服务器内部错误
    4.属性 - responseText
        作用：响应文本
    5.事件 - onreadystatechange
        作用：每当xhr的readyState发生改变时，都要触发的操作 - 回调函数
            当readyState的值为4并且status的值为200时，就可以接收响应的数据(responseText)
    6.方法 - send()
        作用：通知xhr向服务器端发送请求
        语法：xhr.send(body)
            body 为请求体
            get 请求：body 的值为null
                xhr.send(null)
            post请求：body为要提交的数据
                xhr.send("请求数据")
4.AJXA的操作步骤
    1.GET请求
        1.创建xhr对象
        2.创建请求 - open()
        3.设置回调函数 - onreadystatechange  判断状态并接收数据
        4.发送请求 - send()

        有请求参数：
            请求地址后面拼查询字符串
            xhr.open("get", "/01-server?k=v&k=v", true)
    2.POST请求
        1.请求数据放在 send() 中
            xhr.send("name=xxx&age=xxx")
        2.Content-Type 消息头的设置
            ajax post 请求中，默认会将 Content-Type 更改为text/plain,导致数据无法正常提交
            解决：
                将 Content-Type 消息头设置为
                    application/x-www-form-urlencoded
                创建请求之后，发送请求之前，增加：
                    xhr.setRequestHeader("Content-Type","application/x-www-form-urlencoded")






















