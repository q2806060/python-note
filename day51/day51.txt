1.数组 Array
    1.属性
        length 表示数组长度，元素个数
        数组中元素的下标从零开始，下标范围可使用[0,length-1]
        使用：
            对象的属性和方法都可以采用点语法操作
    2.方法
        1.toString();
            作用：将数组转换成字符串 [1,2,3] ---> "1,2,3"
            返回：字符串
        2.join(param)
            作用：将数组中的元素按照指定的符号进行连接
            返回值：字符串           
            参数：指定数组元素的连接符，自定义；可以省略，如果省略，数组中元素仍然按照","连接
        3.reverse()
            作用：反转数组，将第一个元素调至最后，最后一个元素调到第一个，倒序重排
            返回：返回数组
            注：该方法是对数组结构的调整，影响原始数组
        4.sort(param)
            作用：对数组中的与元素按照Unicode码升序排列
            返回：数组，会改变原始数组的存储顺序
            参数：可选，可以传入一个排序算法，指定排序方式
            例：
                自定义排序函数
                    function sortASC(a,b){
                        return a-b / b-a;  // 升序/降序排列
                    }
                作为参数传入sort()之后，将数组中元素两两传入函数，通过差值比较大小，如果a-b>0，则交换两个元素的位置
        5.push(data)
            作用：在数组末尾添加一个或多个元素
            返回：新的数组长度
            参数：要添加的元素，多个元素之间逗号隔开
        6.pop()
            作用：移除数组中的末尾一个元素
            返回：被删除的元素
        7.unshift(data)
            作用：在数组的头部添加一个或多个元素
            返回：新的数组长度
            参数：要添加的元素，多个元素之间逗号隔开
        8.shift()
            作用：移除数组第一个元素
            返回：被删除的元素 
        9.forEach(function)
            作用：遍历数组
            参数：定义函数，实现接收元素和对应的下标
                例： 
                    function getElem(elem,index){
                        console.log(elem,index);
                    } 
                解释：
                    forEach()方法实现数组遍历，自动调用函数，将数组元素及下标传入函数中，可以在函数中对数组元素进行相关的操作
                    函数中定义两个参数，分别接收元素和下标，可以只写一个参数，表示只接收元素
        10.concat()
            作用：拼接两个或更多的数组，并返回拼接后的结果
            语法：arr1.concat(arr2, arr3, arr4);
            注意：
                1.concat不会改变现有数组，而是返回拼接后的
                2.每个参数不一定是数组，也可以是普通的数据
        11.slice(start, [end]) --- 数组切片
            作用：从指定数组中，截取几个连续的元素组成的新数组
        12.splice()
            作用：允许从指定数组中，删除一部分元素，同时再添加另一部分元素
            语法：arr.splice(start, count, e1, e2, ....);
                删除从start之前开始count个元素，并添加e1, e2, ...
                返回一个由删除元素组成的数组
            注：会改变原有数组


    3.二维数组
        1.数组每一个元素都是数组类型
        2.创建：
            var arr = [[1,2],[3,4],[5,6,7,8]];              
        3.访问
            1.下标
                arr[2][0]; //访问内层数组的元素
            2.遍历
                for(var i = 0; i < arr.length; i++){
                    for(var j = 0; j < arr[i].length; j++){
                        console.log(arr[i][j]);
                    }
                }

2.字符串 String 
    1.创建 
        var s1 = "hello";
        var s2 = new String("world");
        var s3 = String("abc");  // 只有内置类型可以省略
    2.属性：length
    3.方法
        1.字母转换大小写
            1.toUpperCase()
                转换大写字母
            2.toLowerCase()
                转换小写字母
        2.获取指定字符或字符编码
            1.charAt(index)
                获取指定下标对应的字符
            2.charCodeAt(index)
                获取指定下标对应的字符编码
                注：参数可以省略，默认为0（起始下标）
            3.String.fromCharCode(unicode)
                将unicode编码准换回字符串
        3.检索字符(获取指定字符的下标)
            1.indexOf(value,fromIndex)
                作用：获取指定字符的下标
                返回：返回下标值；返回第一次匹配成功的下标，如果查找失败返回-1；
                参数：
                    1.value:必填，指定查找字符（串）
                    2.fromIndex:选填，默认为0，可以取整数值，代表从指定下标位置开始向后查找
            2.lastIndexOf(value,fromIndex)
                作用：返回字符最后一次出现的下标位置
                参数： 
                    1.value:必填，指定查找字符（串）
                    2.fromIndex:选填，会从指定下标位置向前查找（从后向前找，找到即返回）
        4.截取字符串
            1.substring(startIndex[,endIndex])
                作用：根据指定的下标范围，截取相应的字符串，截取范围startIndex ~ endIndex-1
                参数：endIndex省略，表示截取值末尾
                返回：截取的字符串
                注：不支持负数
            2.sunstr(startIndex, count)
                作用：获取指定个数的字符串
        5.分割字符串
            split(seperator)
            作用：根据指定的分隔符，分割字符串
            返回：数组，数组中存放分割后的每个字符串
            参数：指定字符串中已存在的某个字符作为分隔符，如果分隔符为字符串中不存在的字符，不会实现分割
        6.模式匹配
            1.作用：结合正则表达式实现指定字符串的查找和替换
            2.正则表达式
                1.语法
                    /正则格式/修饰符
                    修饰符：
                        g：global 全局匹配
                        i：ignorecase 忽略大小写
                    例：
                        var reg1 = /software/g;
                        var reg2 = /\d{2,6}/;
            3.字符串方法
                1.match(regexp/substr) -- 可以在正则后加i，忽略大小写  --- 后加g，返回全部查找内容
                    参数：通过正则表达式或指定的字符串表示要匹配的内容
                    作用：查找满足正则格式或满足给定字符串要求的内容
                    返回：数组，存放所有匹配到的结果，没结果，返回null
                2.search(regexp)
                    作用：查找满足要求的内容 
                    返回：返回位置
            4.高级替换
                注：若匹配分组，newStr中可用$1...$2...$3... 表示分组数据
                    正则中可用\1表示第一个分组内容
                1.replace(regexp/substr,newStr)
                    作用：根据指定的正则或字符串查找相关内容，并使用newStr替换
                    返回：返回替换后的字符串，不影响原始字符串
                2.str = str.replace(/正则表达式/,function(kword){
                    return 根据本次找到的 kword 的不同，选择不同的替换值返回
                })

3.正则表达式 RegExp 
    1.RegExp:Regular Expression
        指定字符串的组成模式
    2.创建 
        1.var reg1 = /正则格式/修饰符;
        2.var reg2 = new RegExp("正则格式","修饰符");
    3.属性和方法
        1.属性：lastIndex
            可读可写，保存下一次匹配的起始下标
        2.方法：test(str)
            验证字符串中是否存在满足正则表达式的内容
            返回值：布尔值，参数即为要验证的字符串
        3.方法：exec(str)
            在str中查找下一个符合reg要求的关键词的内容和位置
            循环使用会向下查找
            返回值：数组[0：关键词内容, index：关键词的位置]
    4.修饰符 ----   i忽略大小写 \ g查找全部 \ ig 我都要

4.数学 Math
    1.提供一系列数学方法做值得操作
    2.属性： 
        1.圆周率（3.14）/角度（180度）：Math.PI
        2.自然对象：Math.E 
    3.方法： 
        1.三角函数
            Math.sin(x) 求正弦
            Math.cos(x)
            Math.tan(x)
            注意：参数应为角度值，可以借助Math.PI计算
        2.计算函数
            Math.sqrt(x) 开平方
            Math.pow(x,y) 计算x的y次方
            Math.log(x) 求对数
        3.数值计算
            Math.abs(x); 求绝对值
            Math.max(a,b,c,d,e); 求一组数据中的最大值
            Math.min(a,b,c,d,e);
            注：若为数组 ---   Math.max(...scores)  打散数组，然后进行计算
            -----------------------
            Math.random() 生成[0,1)之间的随机小数
            Math.ceil(x) 对x向上取整，舍弃小数位，整数位+1
            Math.floor(x) 对x向下取整，舍弃小数位，保留整数位
            Math.round(x) 四舍五入对x取整


5.日期对象 Date
    1.提供一系列操作日期与时间的方法
    2.创建 
        1.获取当前的系统时间
            var date1 = new Date();
        2.创建指定日期时间的对象
            var date2 = new Date("2012/12/12 12:12:12");
            var date3 = new Date("2012-12-12"); // 时分秒默认
    3.方法  
        1.getFullYear()
            获取当前日期对象中的年份信息
        2.getMonth()
            获取月份信息,返回0-11对应12个月，需要手动+1
        3.getDate()
            获取日期信息 
        4.getDay()
            获取星期信息,返回0-6对应星期日-星期六，对于周日需要特殊处理
        5.getHours()
            获取小时数
        6.getMinutes()
            获取分钟数
        7.getSeconds()
            获取秒数
    4.转换日期的显示格式
        1.toLocaleString()
            以本地格式显示日期对象
        2.toLocaleDateString 
            提取当前时间年月日
        3.toLocaleTimeString
            提取当前时间时分秒

















