
import 语句搜索顺序：
    1.内建函数
    2.运行时的路径
    3.sys.path下的路径

模块的重新加载：
    import 模块名
    import imp
    imp.reload(模块名)
    注： 仅在开发调试阶段使用


模块被导入的执行过程：
    1.先搜索相关的路程，找到.py文件
    2.判断是否有此文件对应的.pyc文件。如果没有，则用.py文件生成.pyc文件。
    3.如果存在.pyc文件，需判断.py是否比.pyc文件新。如果新，则重新生成.pyc，然后再加载.pyc文件。

模块的属性：
    __file__属性：
        用来绑定模块对应的文件路径名
        注：内建模块没有__file__属性

    __name__属性：
        1.用来记录模块的自身的名字
        2.用来判断是否为主模块
        注：    
            主模块是指程序第一个执行起来的模块
        说明：
            当此模块作为主模块运行时，__name__属性绑定'__main__'
            当此模块不作为主模块运行时，此__name__绑定模块名

模块的__all__列表：
    用来存放可导出属性的字符串列表
    作用：
        限定在用from xxx import *导入时，只导入__all__列表内的属性


模块的隐藏属性：
    模块中以下划线开头的属性在from import * 语句导入时，将不被导入，通常称这些属性为隐藏属性。       


标准库模块：
    随机模块：random
        用法：
            用于模拟或生成随机数的模块



包 package
    包的定义：
        包是将模块以文件夹的形式进行分组管理的方法
    作用：
        将一系列模块进行分类管理，有利于防止命名冲突
        可以在需要时加载一个或部分模块而不是全部模块

包的导入：
    同模块的导入规则相同
    语法：
        import 包名 [as 包别名]
        import 包名.模块名 [as 模块新名]
        import 包名.子包名.模块名 [as 模块新名]
        ....
        from 包名 import 模块名 [as 模块新名]
        from 包名.模块名 import 模块名 [as 模块新名]
        from 包名.子包名.模块名 import 模块名 [as 模块新名]
        ...
        from 包名 import *
        from 包名.模块名 import *


__init__.py 文件：
    是常规包内必须存在的文件
    __init__.py会在包加载时自动调用

    作用：
        编写此包的内容
        在内部填写文档字符串
        在__init__.py文件内可以加载此包所依赖的一些其他模块

    

包的相对导入：
    包的相对导入是指包内的模块的相互导入
    语法：
        from 相对路径包或模块 import属性名或模块名
        或
        from 相对路径包或模块 import *
    相对路径：
    在用from xxx import yyy 语句中
    xxx 部分可以使用相对路径
    . 代表当前目录
    .. 代表上一级目录
    ... 代表上两级目录
    ....以此类推
    注：
        相对导入时不能超出包的外部























































































