1.位运算符
    1.直接对二进制位进行操作
    2.分类
        1.位与 ： &
            将操作数转换成二进制形式，按位进行与操作（全1则1）
            例： 3 & 5 = 1
              0 1 1 
            & 1 0 1
            -------
              0 0 1
            注：位与运算可以用来判断操作数的奇偶，任何整数与1做位与运算，结果为0，操作数为偶数；结果为1，操作数为奇数。
        2.位或 ： |
            对二进制位进行操作，有1则1
            例： 3 | 5 = 7
              0 1 1
            | 1 0 1
            -------
              1 1 1
        3.异或 ： ^
            对二进制位进行操作，相同为0，不同为1
            例： 3 ^ 5 = 6
              0 1 1
            ^ 1 0 1
            -------
              1 1 0
            注：异或可以在不借助第三方变量的情况下互换两个变量的值
    3.赋值和扩展赋值运算符
        1.赋值运算符：=
        2.扩展赋值运算符
            +=, -=, *=, /=, ^=, ...

2.三目运算符
    语法：
        条件1 ? 表达式1:表达式2;
    过程：
        1.判断条件表达式的结果
        2.结果为true,执行表达式1
        3.结果为false,执行表达式2
        4.返回表达式执行的结果

3.流程控制
    1.控制代码的执行顺序
    2.分类
        1.顺序结构
            自上而下依次执行所有的JS语句
        2.分支结构（选择结构）
            根据条件是否成立，选择执行某一段代码
            1.if 语句
                1.if (条件) {//条件成立时，执行的代码}
                    注： 
                        1.{}可以省略，一旦省略，if结构只控制其后第一行代码的执行
                        2.零值为假：
                            0 0.0 "" NaN undefined null 
            2.if - else
                语法：
                    if(条件){
                        //条件成立时执行 
                    }else{
                        //条件不成立时执行
                    }
            3.多重分支
                语法：  
                    if(条件1){
                        //条件1成立时执行的代码
                    }else if(条件2){
                        //条件2成立时执行的代码
                    }else{
                        //条件不成立时执行的代码
                    }
            4.switch 语句
                switch语句常用于做值得全等匹配
                语法：  
                    switch(变量){
                        case 值1:
                            //匹配成功执行的代码语句
                            break; //结束switch匹配
                        case 值2:
                            //匹配成功执行的代码段
                            break;
                        default:
                            //匹配失败最终可以执行的代码段
                            [break;]
                    }
                注意：
                    1.使用switch进行值得匹配，是全等匹配，只有类型一致值相等才能匹配成功
                    2.case 用于列举所有可能的值
                    3.break 用于结束匹配，不再向后执行，break 可以省略，一旦省略，会从当前匹配到的case开始向后依次执行所有的代码语句
                    4.多个case可以共用代码段
                        语法： 
                            case "1":
                            case "2":
                            ...
                                //代码段
                                break;
                    5.default 一般写在末尾，表示所有case都匹配失败后最终执行的操作，可以省略
                    























