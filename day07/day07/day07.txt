day06回顾
  列表 list
    创建:
      []
      list(可迭代对象)
      [x ** 2 for x in range(1, 10) if ...]  # 列表推导式
    运算:
      + += * *=
      < <= > >= == !=
      in / not in 
      索引
      切片操作
    del 语句:
       del 列表[索引／切片]
    
函数:
  len(x)
  max(x)  求可迭代对象的最大值
     max(可迭代对象)
     max(值１，　值2, ....)
  min(x)
  sum(x)  # 求可迭代对象中数字的和
  any(x)  
  all(x)  

列表中的方法:
  L.append(x)   追加
  L.extend(可迭代对象)  # 扩展  L += 可迭代对象
  L.insert(索引，　值)
  L.remove(x)     根据值来删除第一次出现的对象
  L.pop([索引])   根据索引来取出数据,返回原来的值
  L.clear()      清空
  L.index(值, begin, end)   根据值来取索引
  L.count(x)   　　
  L.copy()      复制(默认是浅拷贝)
  L.sort(reverse=False)   排序
  L.reverse()    反转

深拷贝 和 浅拷贝, 不拷贝

字符串的文本解析方法:
   S.split(sep=None)  
   S.join(列表)   

列表推导式:
  作用：
  　创建一个新的列表
  [x for x in range(1, 100) if x % 2 == 1]
  [x + y for x in "ABC" for y in '123' if y != '2']



元组 tuple
  元组的定义:
    元组是不可改变的序列容器
    同list一样，元组可以存放任意类型的数据元素
  注:
    不可改变是指一但创建，不可以添加和删除数据元素

元组的表示方式:
  用小括号 () 括起来．单个元素括起来后加逗号(,) 号区分
  单个对象还是元组

创建空元组的字面值:
    t = ()   # t绑定空元组

创建非空元组的字面值:
    t = 200,
    t = (20,)
    t = (1, 2, 3)
    t = 100,200,300
type(x)　 函数用来返回x的类型

元组的错误示例:
   t = (20)   # t 绑定整数20,不是元组
   x, y, z = 100, 200, 300  # 序列赋值
   x, y, z = (1, 2, 3)     # 序列赋值
   x, y, z = "ABC"         # 序列赋值
   x, y, z = [10, 20, 30]  # 序列赋值
   x, y = y, x  # 为什么能实现交换? y, x就是在创建元组

格式化字符串中:
   "姓名:%s, 年龄:%d"  % ("tarena", 15)

元组的构造(创建)函数 tuple
  tuple()   创建一个空的元组，等同于 ()
  tuple(iterable)  用可迭代对象创建一个空的元组
  
  示例:
    t = tuple()
    t = tuple("ABC")
    t = tuple([x**2 for x in range(10)])
    t = tuple(range(10))

元组的运算:
  算术运算:
    + += * *= 
  + 加号用于拼接
    t = (1, 2, 3) + (4, 5, 6)
  += 用于拼接运算后，用变量绑定新元组
    x = (1, 2, 3)
    x += (4, 5, 6)  # x = (1, 2, 3, 4, 5, 6)
  * 生成重复的元组
    x = (1, 2) * 3  # x = (1,2, 1, 2, 1, 2)
  *= 生成重复的元组，用变量绑定新元组
    x = (1, 2)
    x *= 3  # (1, 2, 1, 2, 1, 2)

可变和不可变对象的本质区别:
  列表:
    L1 = [1, 2, 3]
    L2 = L1
    L2 += [4, 5, 6]
    print(L2)  # [1, 2, 3, 4, 5, 6]
    print(L1)  # [1, 2, 3, 4, 5, 6]
  元组:
    L1 = (1, 2, 3)
    L2 = L1
    L2 += (4, 5, 6)
    print(L2)  # (1, 2, 3, 4, 5, 6)
    print(L1)  # (1, 2, 3)  为什么？


  元组的比较运算符
    < <= > >= == != 
    规则同列表的比较规则
  in / not in 运算符
    规则同列表的规则一致
  索引/切片运算
    v = 元组[整数]
    t = 元组[:]
    t = 元组[::]
    同列表取值规则完全相同,元组不支持索引赋值和切片赋值

元组的方法:
    文档参见:
      python_base_docs_html/tuple.html

序列相关的函数
  len(x)  max(x) min(x) sum(x)  any(x) all(x)

三个序列的构造函数:
  str([obj])
  list([可迭代对象])
  tuple([可迭代对象])

两个内建函数:
  reversed(可迭代对象)  返回反向顺序的可迭代对象
  sorted(可迭代对象, reverse=False)  返回已排序对象的
                      列表
  示例:
    L = [8, 6, 4, 3, 7]
    for x in L:
        print(x)  # ???
    for x in reversed(L):
        print(x)  # 7, 3, 4, 6, 8
    
    L2 = sorted(L)  # L2 = [3, 4, 6, 7, 8]
    L3 = sorted(L, reverse=True)  # L3 = [8,7,6,4,3]

  
字典 dict
  什么是字典
    字典是一种可变的容器,可以存储任意类型的数据
    字典中的每个数据都是用"键"(key) 进行索引,而不像序列
    (字符串,列表,元组)可以用下标来索引
    字典中的数据以键(key)-值(value)对形式进行映射存储
    字典中的数据没有先后顺序关系,字典的存储是无序的
    字典的键不能重复,且只能用不可变类型作为字典的键
  
字面的表示方式:
  字典的表示方式是{} 括起来,以冒号(:)分隔键-值对,各
  键-值对之间用逗号分隔开

  创建空典的字面值
    d = {}    #  d 绑定空字典
  创建非空的字典:
    d = {'name': 'tarena', 'age': 15}
    d = {'name': None, 'age': 1}
    d = {'a': list(range(10))}
    d = {100: "一百"}
    d = {(1970,1,1): "计算机元年"}
    # d = {[1970,1,1]: '计算机元年'}  # TypeError
    d = {3.14: {"b": 100, "c": 200}}
    d = {'一': "One", '二': 'Two', '三': 'Three'}

字典的构造函数 dict
  dict()  生成一个空的字典,等同于 {}
  dict(iterable)  用可迭代对象生成一个字典
  dict(**kwargs)  用关键字传参形式生成一个字典

  示例:
    d = dict()
    L = [(1, 2), [3, 4], "AB"]
    d = dict(L)  # L中每个元素都是含有两个元素的序列
    d = dict(name="tarena", age=15)
  
字典的键(key) 必须为不可变类型
   bool, int, float, complex, str, tuple
   (以下后面才学)
   frozenset, bytes

可变类型不能作为字典的键
  list, dict, 
  set, bytearray(后面才学)

字典的基本操作
  字典的键索引:
    用[] 运算符可以获取字典的'键' 对应的 '值'
  取值语法:
    v = 字典[键]
  示例:
    d = {'name': 'tarena', 'age':20}
    print(d['name'], '今年', d['age'], '岁')

  赋值的语法:
    字典[键] = 表达式
  说明:
    键不存在,创建键,并绑定键对应的值
    键存在,修改绑的绑定关系
  示例:
    d = {}
    d['name'] = "小张"  # 创建'name'键 同时绑定'小张'
    d['age']  = 20
    d['age']  = 21  # 修改'age'这个键绑定的值

删除字典的键值对
  del 语句
    语法:
      del 字典[键]
    作用:
      删除字典内的键,同时解除对值的绑定
    示例:
      d = {"a": "一", 'b':'二', 3:333}

in / not in 运算符
  成员资格运算
  作用:
    判断一个键是否存在于字典中.如果存在则返回True, 否
    则返回False
  说明:
    not in 返回结果与 in 相反
  示例:
    d = {'name': "小张", 'age':15}
    'name' in d  # True
    '小张' in d   # False

练习:
  写程序,实现以下要求:
    1) 将如下数据形成一个字典 seasons
      键         值
      1     '春季有1,2,3月'
      2     '夏季有4,5,6月'
      3     '秋季有7,8,9月'
      4     '冬季有10,11,12月'
    2)  让用户输入一个整数代表这个季度,打印这个季度的信息
      如果用户输入的信息不在字典内,则打印"信息不存在"
    



字典的迭代访问:
  字典是可迭代对象,字典只能对键进行迭代访问
  示例:
    d = {1:"一元", 2:"二元", 5:"五元", 10:"十元"}
    for x in d:
        print(x)   # 1 2 5 10    

可以用于字典的内建函数
  len(x)   返回字典的键-值对的个数
  max(x)   返回字典中键的最大值
  min(x)   返回字典中键的最小值
  sum(x)   返回字典中所有键的和
  any(x)   真值测试,如果字典中其中一个键为真值则返回True
  all(x)   真值测试,所有键为真值才返回True
  示例:
    d = {0:'零', 5:'伍', 8:'捌', 3:'叁'}
    print(len(d))  # 4
    print(max(d))  # 8
    print(min(d))  # 0
    print(sum(d))  # 16
    print(any(d))  # True
    print(all(d))  # False


字典的方法
  文档参见:
    python_base_docs_html/dict.html

  示例:
    d = {1: "One", 2: "two"}
    d2 = {2:"二", 3:"三"}
    d.update(d2)  # d = {1: 'One', 2: '二', 3: '三'}
    print(d[5])  # KeyError
    print(d.get(5))  # None
    print(d.get(5, "不存在"))  # 不存在
    print(d.get(2, "不存在))   # 二
    d2 = {0:'零', 5:'伍', 8:'捌', 3:'叁'}
    for x in d2.keys():
        print(x)   # 0, 5, 8, 3
    for x in d2.values():
        print(x)   # '零', '捌', '叁', '伍'

    for t in d2.items():
        print(t)  # (0, '零') (8, '捌') (3, '叁') (5, '伍')
    for k, v in d2.items():
        print("键:", k, '的值是', v)

练习:
  输入一段字符串,打印出这个字符串中出现过的字符及出现的次数
  如:
    输入: ABCDABCABA
    输出:
      A: 4次
      B: 3次
      D: 1次
      C: 2次
      注: 不要求打印的顺序
    

字典推导式
  字典推导式是用可迭代对象生成字典的表达式

  语法:
    {键表达式: 值表达式 for 变量 in 可迭代对象 
          [if 真值表达式] }
    注: [] 的内容代表可省略
  示例:
    # 生成一个字典,键为数字 1~9, 值为键的平方
    # {1:1, 2:4, 3:9, .... 9:81}
    d = {x : x**2 for x in range(1, 10)}

练习:
  1. 有如下字符串列表
    L = ['tarena', 'xiaozhang', 'hello']
    生成如下字典:
    d = {'tarena': 6, 'xiaozhang': 9, 'hello':5}
    注:  字典的值为键的长度
  答案:
    d = {x : len(x) for x in L}

  2. 已知有两个等长度的列表list1和lists2, 生成相应字典
    list1 = [1001, 1002, 1005, 1008]
    list2 = ['Tom', 'Jerry', 'Spike', 'Tyke']
    生成的字典为:
    {'Tom':1001, 'Jerry': 1002, ....}


字典推导式嵌套
  语法等同于列表推导式的语法

字典 VS 列表
  1. 都是可变对象
  2. 索引方式不同,列表用整数索引,字典用键索引
  3. 字典的插入,删除,修改的速度可能会快于列表(重要)
  4. 列表的存储是有序的,字典的存储是无序的

示例:
    L = list(range(10))
    for x in L:
        L.remove(x)
   请问最终 L的结果是什么?
   结果:  [1, 3, 5, 7, 9]



练习:
  1. 打印九九乘法表:
    1x1=1
    1x2=2 2x2=4
    1x3=3 2x3=6 3x3=9
    ....
    ....               9x9=81
  2. 输入一个数,代表图形的宽度, 打印如下正方形
    如:
      输入: 5
    打印:
      1 2 3 4 5
      2 3 4 5 6
      3 4 5 6 7
      4 5 6 7 8
      5 6 7 8 9
    如:
      输入: 3
    打印:
      1 2 3
      2 3 4
      3 4 5

  3. 完全数:
    1 + 2 + 3 = 6 (6为完全数)
    1,2,3都为6的因数(能被一个数x整数的数为y,则y为x的因数)
    1 x 6 = 6
    2 x 3 = 6
    完全数是指除自身以外,所有的因数相加之和等于自身的数
    求 4 个完全数,并打印结果
    答案:
      6
      28
      496
      ...
  4. 输入任意个学生的姓名,年龄和成绩,每个学生的信息存入
    字典,然后放入到列表中.
    要求: 每个学生的信息需要手动输入,姓名直接回车,结束输入
    如:
      请输入姓名: tarena
      请输入年龄: 15
      请输入成绩: 99
      请输入姓名: name2
      请输入年龄: 20
      请输入成绩: 88
      请输入姓名: <回车> # 结束输入
    存内部存储格式如下:
      [{'name':'tarena', 'age':15, 'score':99},
       {'name':'name2', 'age':20, 'score':88}]
    然后再用上面的列表,打印学生信息(形成表格)
    +---------------+----------+----------+
    |     姓名      |   年龄    |   成绩    |
    +---------------+----------+----------+
    |    tarena     |   15     |    99    |
    |    name2      |   20     |    88    |
    ...........
    +---------------+----------+----------+

      





