
类变量（类属性）：
    类变量是类的属性，此属性属于类，不属于此类的实例
    作用：
        通常用来存储该类创建的对象的共有属性
    说明：
        类变量可以通过该类直接访问
        类变量可以通过类的实例直接访问
        类变量可以通过此类的对象的__class__属性间接访问


类的文档字符串：
    类内第一个没有赋值给任何变量的字符串为类的文档字符串
    类的文档字符串可以通过help函数查询
    类的文档字符串可以用类的__doc__属性访问

类的__slots__列表：
    作用：
        限定一个类创建的实例只能有固定的属性（实例属性）
        不允许对象添加列表以外的实例属性（实例变量）
        防止用户因错写属性的名称而发生程序错误
    说明：
        __slots__属性是一个列表，列表的值是字符串
        含有__slots__属性的列表所创建的实例对象没有__dict__属性即此实例不用字典来存储对象的实例属性（实例变量）


类方法 @classmethod：
    类方法是用于描述类的行为的方法，类方法属于类，不属于该类创建的对象
    说明：
        类方法需要使用@classmethod装饰器定义
        类方法至少有一个形参，第一个形参用于绑定类，约定写为'cls'
        类和该类的实例都可以调用类方法
        类方法不能访问此类创建的对象的实例属性


静态方法 staticmethod：
    静态方法是定义在类的内部的函数，此函数的作用域是类的内部
    说明：
        静态方法需要使用@staticmethod装饰器定义
        静态方法与普通函数定义形同，不需要传入self实例参数和cls类参数
        静态方法只能其凭借该类或该类创建的实例来调用
        静态方法不能访问类变量和实例变量


实例方法， 类方法， 静态方法， 函数

实例方法能访问实例变量，类变量和全局变量
类方法不能访问实例变量，能访问类变量和全局变量
静态方法不能访问实例变量，类变量，但能访问全局变量
函数只能访问全局变量


继承（inheritance）和派生（derived）
    继承：
        继承是从已有的类中派生出新的类，新类具有原类的属性和行为，并能扩展新的行为
    派生：
        派生类就是从一个已有的类中衍生出新的类，在新类上可以添加新的属性和行为
    目的：
        继承是延续早类的功能
        派生是在旧类的基础上添加新功能
    作用： 
        可以将一些共有功能加载基类中，实现代码共享
        在不改变基类的代码的基础上改变原有类的功能
    名词：
        基类（base class）/超类（super class）/父类（father class）
        派生类（derived class）/子类（child class） 

    单继承：
        class 类名（基类名）：
            语句块
        说明：
            单继承是指派生类由一个基类衍生出来的


继承说明：
    python3 任何类都直接或间接的继承自 object 类 
    object 类是一切类的超类

类的 __base__ 属性：
    __base__ 属性用来记录此类的基类


覆盖 override:
    覆盖是指在有继承关系的类中，子类中实现了与基类同名的方法，在子类的实例调用该方法时，实际调用的是子类中的覆盖版本
    作用：
        实现和父类同名，但功能不同的方法


super 函数：
    super(cls, obj) 返回绑定超类的实例（要求obj必须为cls类型的实例或cls子类的实例）
    super() 返回绑定超类的实例，等同于： super(__class__，实例方法的第一个参数),必须用在方法内调用
    作用：
        借助super() 返回的实例间接调用有和父类的覆盖方法


显示调用基类的初始化方法：
    当子类中实现了__init__方法时，基类的初始化方法并不会被调用，此时需要显示调用才能完成对父类对象的初始化


用于类的函数：
    issubclass(cls, class_or_tuple) 判断一个类是否继承自class,如果此类cls是class或tuple元组中一个类的派生子类，则返回true,否则返回false
    



























































