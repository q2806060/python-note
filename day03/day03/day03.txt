day02回顾:
  运算符:
    复合赋值算术运算符
      += -= *= /= //= %= **=
    比较运算
      < <= > >= == != 
    布尔运算
      not    and    or
     短路运算： 一但结果确定，后面的表达式将不再执行
  一元运算符
     +(正号)  -(负号)
  内建函数
    构造函数:
      float(xxxx)
      int(x, base=10) / int(x=0)
      complex(xxxxx)
      bool(x)
  函数调用语法:
     函数名( 传递参数 )
    函数调用是表达式，表达式一定能返回数据对象的引用

    数值型函数:
      abs(x)
      round(数字, 精度位数)
      pow(x, y, z=None)
    输入输出函数:
      input('提示字符串')
        返回用户输入的字符串
          注：这是一个阻塞函数
      print(value, ..., sep=' ', end='\n,
           file=sys.stdout, flush=False)
      
语句:
  显式换行    折行符 \
  隐式换行    ()   []  {}

if 语句
   if 真值表达式:
        语句....
    elif  ....:
        语句...
    elif  ....
        ....
    ....
    else:
        语句...

if 嵌套

条件表达式
  zuida = x if x > y else y

pass 语句
  填充语法空白







day03 笔记
字符串 str
  作用:
    是用来记录文本信息(文字信息)
  字符串的字面值表示方式:
    在非注释中凡是用引号括起来的部分都是字符串
      '   单引号
      "   双引号
      ''' 三单引
      """ 三双引
  字面值:
    # 空字符串
       ''     ""     ''''''     """"""
    # 非空字符串
       'hello'    "hello"  '''hello''' 
       """hello"""

  单引号和双引号的区别
    单引号内的双引号不算结束符
    双引号内的单引号不算结束符
  示例:
    print("I'm a teacher")
    print('I love "Beijing"')

  三引号字符串
    以'''或""" 开头和结尾的字符串为三引号字符串
    作用:
      三引号内可以包含单引号和双引号
      三引号字符串中的换行会自动转换为换行符'\n'
    示例:
       print("welcome to beijing.\nI like python!\nI am studing!")

字符串的字面值的隐式拼接
   表示内容为:
      I'm teacher. I like "Python". '''""" is str
   >>> "I'm teacher."  'I like "Python". ' "'''"   '""" is str'

用转义字符代表特殊字符
  字符串字面值中用字符反斜杠\ 后跟一个或一些字符代表特殊
  的一个字符

  字符串中转义字符:
    \'    一个单引号
    \"    一个双引号
    \\    一个斜杠
    \n    换行符
    \r    返回光标至行首
    \f    换页
    \t    水平制表符
    \v    垂直制表符
    \b    倒退
    \a    响铃(已无效)
    \0    字符串(编码值为0的字符)
    \0oo  oo为两位八进制表示的字符
    \xXX  xx为两位十六进制表示的字符
    \uXXXX  Unicode 16的十六进制表示的字符
    \UXXXXXXXX Unicode 32 的十六进制表示的字符

ASCII编码:
   $ man ascii

常用的ASCII 编码:
  字符   十进制  十六进制
  '0'    48      0x30
  'A'    65      0x41
  'a'    97      0x61

序列的概念
  字符串就是序列
    字面意思(有序排序)

求序列长度的函数 len(x)
  len(x) 返回字符串的个数
  示例:
    s = 'abcd'
    len(x)  # 返回4

练习:
  试读出如下字符串含有几个字符?
    '123abcd'
    '5\'4"'
    '\"A\x34\056'
    '\a\bc\td\n'   

raw 字符串(原始字符串)
  格式:
    r'字符串内容'
    r"字符串内容"
    r'''字符串内容'''
    r"""字符串内容"""
  作用:
    让转义字符 \ 无效
  示例:
    # 表示  C:\newfile\test.py
    s1 = 'C:\newfile\test.py'
    print(s1)
    s2 = r'C:\newfile\test.py'
    print(s2)

  
字符串的运算:
  运算符:
    +    +=      *     *= 
  + 加号运算符用于拼接字符串
    x = "ABCD" + "1234"
    print(x)   # ABCD1234
    y = "1234" + "ABCD"
    print(y)   # 1234ABCD

  += 用于拼接字符串,同时改变原字符串的变量的绑定的关系
    x = "abcd"
    y = "1234"
    y += x   # 等同于 y = y + x  # 生成新的字符串
    print(x)  # 不变
    print(y)  # 1234abcd

 *  用于生成重复的字符串
   x = "ABC" * 3
   print(x)    # ABCABCABC
   注: 字符串只能和整数相乘
 *=  生成重复字符串,同时用原变量来绑定
   x = "123"
   x *= 4
   print(x)  # 123123123123

练习:
  写一个程序,打印一个高度为4行的矩形方框
    要求输入一个整数,此整数代表矩形的宽度,输出此矩形:
  如:
    请输入矩形的宽度: 10
  打印如下:
    ##########
    #        #
    #        #
    ##########


字符串的比较运算:
  运算符:
    >   >=   <  <=   ==   != 
  规则:
    依次按编码值进行两两字符比较,一但不同则比较结果,返回
    比较结果,当编码值与长度完全相同时,两个字符串相同
  示例:
    'A' < 'B'  # True
    'ABC' > 'ABB'   # True
    'ACB' < 'ABC'   # False
    'AB'  <= 'ABC'  # True
    'ABC'  == 'abc'  # False



in , not in 运算符
  作用:
    in 用于序列,字典,集合中,用于判断某个值是否存在于容器
    中.如果存在返回True, 否则返回False
  格式:
    对象 in 序列
  示例:
    x = 'welcome to tarena!'
    'to' in x  # True
    'china' in x  # False

索引 index
  python 字符串是不可变的序列
    不可变是指一旦创建将不可改变
    序列是指有先后顺序关系有序排列
  作用:
    从一个字符串中获取其中的一个字符
  语法:
    字符串[整数表达式]
  说明:
    python 序列都可以用索引来访问序列中的对象
    python序列的正向索引是从0开始的,第二个索引为1, ...
      最后一个索引为len(x)-1
    python的序列的反向索引是从-1开始的,-1代表最后一个,
      -2代表最后一个,以此类推,第一个是 -len(x)
  示例:
    s = "ABCDE"
    s[1]  # 'B'
    s[-1]  # 'E'
    s[-4]  # 'B'
    s[-8]  # 越界错误 IndexError

练习:
  输入一个字符串,打印如下内容?
    1. 打印这个字符串的第一个字符
    2. 打印这个字符串的最后一个字符
    3. 如果这个字符串的长度是奇数,打印中间这个字符
      注:  求符串长度的函数 len(s)


切片 slice
  作用:
    从字符串序列中取出相应的元素,重新组成一个新的字符串
    序列
  语法:
    字符串[(开始索引b):(结束索引e)(:(步长s))]
      注: 小括号() 括起来的部分代表可省略
  说明:
    开始索引是切片切下的位置,0代表第一个元素,1代表第二个
      元素..... (与索引相同)
    结束索引是切片的终止点(但不包含终止点)
    步长是切片每次获取完当前元素后移动的方向和偏移量
      没有步长, 相当于步长为1(默认为1)
      当步长为正整数时,取正向切片:
        开始索引默认为0,结束索引是最后一个元素的下一个位置
      当步长为负整数时,取反向切片:
        反向切片时,默认的起始位置为最后一个元素,终止位置是
        第一个元素的前一个位置
  示例:
    s = 'ABCDE'
    a = s[1:4]  # 'BCD'
    a = s[1:]  # 'BCDE'
    a = s[:4]  # 'ABCD'
    a = s[:]  # 'ABCDE'  等同于a=s[0:5]
    a = s[1:1]  # ''   空字符串
    a = s[0::2]  # 'ACE'
    a = s[::2]  # 等同于a = s[0:5:2]
    a = s[4:0:-1]  # 'EDCB'
    a = s[3:0:-2]  # 'DB'
    a = s[4::-2]   # 'ECA'
    a = s[::-2]   # 'ECA'

练习:
  1. 写一个程序,输入一个字符串,把字符串的第一个字符和最后
    一个字符去掉后, 打印出处理后的字符串

  2. 输入任意一个字符串,判断这个字符串是否是回文
    回文是指中心对称的文字
      如:
        上海自来水来自海上
        ABCCBA
    随意输入一个字符串,判断是否为回文
  
  
python 运算符的优先级
  文档参见:
    python_base_docs_html/运算符优先级.html

python3 中常用的序列函数:
  len(x)     返回容器中数据的个数(长度)
  max(x)     返回容器中的最大值元素
  min(x)     返回容器中的最小值元素
  示例:
    s = "ABCD1234"
    print(len(s))  # 8
    print(max(s))  # D
    print(min(s))  # 1

字符串编码转换函数:
   ord(c)   返回一个字符串的Unicode编码值
   chr(i)   返回整数i这个值所对应的字符

   示例:
     print(ord('A'))  # 65
     print(ord('中'))  # 20013

练习:
  1. 写一个程序,输入一段字符串,如果字符串不为空,则把
    第一个字符的编码打印出来

  2. 写一个程序,输入一个整数值(0~65535) 打印出这个
    数所对应的字符


整数转换为字符串函数
  bin(i)   将整数转为二进制字符串
  oct(i)   将整数转为八进制字符串
  hex(i)   将整数转为十六进制字符串
  示例:
    x = 1234
    print(bin(x))
    print(oct(x))
    print(hex(x))

字符串的构造(创建)函数 str
  str(obj='')  将对象转换为字符串

  示例:
    a = str(100)  # a = '100'
    a = str(3.14)  # a = '3.14'
    a = str(None)  # a = 'None'

查看函数的帮助:
    >>> help(函数名)
    >>> help(类型名)
    >>> help(对象)

  
python3中 常用的字符串方法(method)
  语法:
    对象.方法名(方法传参)
  示例:
    'abc'.isalpha()  # 语法是对的
    123.isalpha()   # 错的
  文档参见:
    python_base_docs_html/str.html


练习:
  1. 用字符串 * 运算符打印三角形
    输入一个整数,此整数代表此三角形左侧预留的字符数
      当数字越大时,此三角形越靠右
         *
        ***
       *****
      *******
  2. 输入一个字符串,把输入的字符串中的空格全部去掉,打印
    出处理后的字符串的长度及内容

  3. 输入三行文字,让这三行文字在一个方框内居中显示
    如输入(不要输入中文):
      hello!
      I'm studing python!
      I like python!
    显示如下:
      +---------------------+
      |        hello!       |
      | I'm studing python! |
      |   I like python!    |
      +---------------------+
      






