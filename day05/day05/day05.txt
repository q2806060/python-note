day04回顾:
  字符串的格式化表达式
  循环

字符串的格式化表达式:
  字符串 % 参数
  字符串 % (参数1, 参数2, ....)

  "%d" % 100
  "%d%d" % (100, 200)

  占位符和类型码:
    %s  %d  %f %x  %o  %c  %g ... %%

  占位符和类型码之间的格式化语法
    %  [-   +   0  整数宽度.整数的精度] f


循环语句
   while 语句
   for 语句
while 语句语法
    while 真值表达式:
        语句块1
    else:
        语句块2
while 语句嵌套:
    while xxxxx:
        while yyyyy:
            while zzzz:
                pass
break 语句

死循环
  条件一直成立的循环
  break语句退出死循环
  while True:  # while 1:
       pass
  强制终止程序执行:
    ctrl + c  给操作系统发信号,强制终止进程

    




day05 笔记:
循环语句
  while 语句
  for 语句

for 语句:
  作用:
    用来遍历可迭代对象的数据元素

  可迭代对象是指能依次获取数据元素的对象
  可迭代对象包括:
    字符串 str
    列表 list
    元组 tuple
    ...
  语法:
    for 变量列表 in 可迭代对象:
        语句块1
    else:
        语句块2
  说明:
    else子句部分可以省略(同while类似)
    当在循环语句内部用break终止循环时,else子句部分的
    语句不会执行
  示例见:
    for.py

练习:
  1. 任意输入一段字符串
    1) 计算出这个字符串中空格的个数,打印这个数
       (要求: 用 for语句,不允许使用S.count方法)
    2) 计算出字符串中,全部英文字符的个数
       注: 英文字符的编码值为: 0 ~ 127
    
    思考:
      用while语句能否实现上述功能?


range 函数:
  格式:
    range(stop)   用来生成0~stop区间内的整数,直到stop
              为止(不包含 stop)
    range(start, stop[, step]) 用来生成start~stop
              区间内的整数,直到stop为止(不包含stop),
              每个整数间隔step,且step可以为负数,当不写
              step时.默认为1
  作用:
    用来创建一个生成一系列整数的可迭代对象(也叫整数序列生
    成器)
  说明:
    此函数返回的可迭代对象可以用for语句进行取出其中的元素
  示例:
    range(4)        # 生成 0 1 2 3
    range(3, 6)     # 生成 3 4 5
    range(3, 6, 1)   # 生成 3 4 5
    range(1, 10, 2)  # 生成 1 3 5 7 9
    range(5, 0, -2)  # 生成 5 3 1
    range(4, 0)      #   空
  示例见:
    range.py

练习:
  1. 用 for 语句打印1~20的数字,打印在一行内

  2. 输入任意一个整数,代表结束值:
    求:
      1 + 2 + 3 + 4 + .... + n 的和
    并打印


for 语句注意事项:
  for 和 range的调用顺序
    示例见:
      for_range.py
  for语句中的变量可能不被创建的问题
    示例:
      for x in range(4, 0):
          print(x)
      print("循环结束后的x的值是", x)  # 出错

for 语句嵌套:
  示例:
    for x in "abc":
        for y in "123":
            print(x+y)
  # 思考下面的print语句执行几次?
    for x in range(5):
        for y in range(10):
            print("hello")  # 请问打印多少次?

练习:
  求 100以内有哪儿些正整数与自身+1的乘积再对11求余等于8?
       x *(x+1) % 11 == 8  


continue 语句
  问题:
    如何让程序不再向下执行,重新开始一次新的循环?
  作用:
    用于循环语句(while或for)中,不再执行本次循环内的
    continue 之后的语句,重新开始一次新的循环
  语法:
    continue
  说明:
    1. 在while语句中执行continue语句,将会直接跳转到
       while语句的真值表达式处重新判断循环条件
    2. 在for语句中执行continue语句,将会从可迭代对象中取
       下一个元素,绑定变量后再次进行循环
  示例见:
    continue.py
    continue2.py
    while_continue.py

练习:
  1. 打印 100 以内的奇数,打印在一行内
     可以采用跳过偶数的方式
  2. 求 1 ~ 100之间所有不能被 2或不能被3, 5, 7
      整除的数的和
    

循环总结:
  while 语句
  for 语句
      字符串
      range函数调用后返回的对象
  break 语句
  continue 语句


列表 list
  如何将计算机运算的数据临时存入一个地方,同时又方便添加
  删除,修改等操作

什么是列表
  列表是一种容器
  列表是可以被改变的序列容器
  列表是由一系列元素组成的,元素和元素之间可能没有任何关系
    但他们之间有先后顺序关系
  
python3中序列的类型介绍
  字符串 str
  列表 list
  元组 tuplel
  字节串 bytes
  字节数组 bytearray


创建空列表的字面值
   L = []   # L绑定空列表
   注: 列表是用 [] 括起来表示的

创建非空列表的字面值
   L = [1, 2, 3, 4]
   L = ['北京', '上海', '天津', '重庆']
   L = [1, 'two', 3.14, '四']

列表的构造(创建)函数 list
   list()   生成一个空的列表,等同于 []
   list(iterable)    用可迭代对象创建一个列表
  示例:
    L = list()  # L 绑定空列表
    L = list("hello")  # L = ['h', 'e', 'l', 'l', 'o']
    L = list(range(1, 10, 2))  # L = [1, 3, 5, 7, 9]


列表的运算:
  算术运算:
    +   +=    *   *=

+ 号用于拼接列表
  x = [1, 2, 3] + [4, 5, 6]

+=  用自身列表加另一个列表(可迭代对象),用原变量绑定列表
  语法:
    x += 可迭代对象
  示例:
    x = [1,2,3]
    x += [4,5,6]  # 本质上不等同于 x = x + [4, 5, 6]
    x += range(7, 10)  # L =[1,2,3,4,5,6,7,8,9]
    x += "ABC"

* 生成重复的列表
  x = [1, 2] * 3  # x = [1, 2, 1, 2, 1, 2]
  x = 3 * [1, 2]

*= 用原变量的列表,生成重复的列表,用变量绑定新列表
  x = [1, 2, 3]
  x *= 4  # x=[1,2,3,1,2,3,1,2,3,1,2,3]


列表的比较运算:
  运算符:
    <  <=  >  >=  ==  !=
  说明:
    列表的比较规则与字符串的比较规则相同
    列表要求每两个元素能依次进行比较,否则会出现错误
  示例:
    [1, 2, 3]  < [2, 3, 4]  # True
    [1, 2, 4]  <= [1, 4, 2]  # True
    [1, 2, 3]  >= [1, 2]     # True
    ["ABC", '123'] > ['abc', '012']  # False
    [1, '二'] > ['二', 1]    # TypeError
    ["123", 100] < ['456', '你好']  # True

列表是可迭对象
    L = [1, 3, 5, 7]
    for x in L:
        print(x)  



练习:
   1. 输入三行文字,将这三行文字保存在一个列表L中, 并打印
    这个列表
      如:
        输入: abc<回车>
        输入: 1234<回车>
        输入: 你好<回车>
      生成如下列表:
        L  = ['abc', '1234', '你好']
        print(L)

  1. 写一个程序,让用户输入很多个正整数,当输入负数时结束
     输入,将用户输入的数字存于列表L 中
       1) 打印这个列表
       2) 打印这个列表中所有元素的和
       3) 打印这个列表中所有元素的平方和
     如:
       输入: 1
       输入: 2
       输入: 3
       输入: -1
     结果:
       列表是:[1, 2, 3]
       和是: 6
       平方和是: 14


列表的in / not in 运算
  判断一个值是否存在于列表中.如果存在返回True,否则返回
  False
  not in 与 in 的值相反
  示例:
    x = [1, 'two', 3, 'Four']
    3 in x        # True
    '3' in x      # False
    100 not in x  # True
    1 not in x    # False
    'two' in x    # True
    'tw' in x     # False
    L = [1, 2, [3, 4], 5]
    3 in L        # False



列表的索引操作
  语法:
    列表[整数表达式]
  用法:
    等同于字符串索引
    索引同样分正向索引和反向索引,规则与字符串完全相同
  示例:
    x = list("ABCD")
    print(x[1])  # B
    v = x[-1]
    print(v)  # D
列表支持索引赋值
  列表是可变的容器.可以通过索引赋值改变列表中的元素
  语法:
    列表[整数表达式] = 表达式
  作用:
    改变某个元素的值
  示例:
    x = [1, 2, 3, 4]
    x[2] = 3.14  # 此做法改变了第三个元素的值
    print(x)
    


列表的切片
  列表[:]
  列表[::]
  列表的切片会从列表中依次取出数据元素.重新组成一个新的列表
  规则同字符串列表

  示列:
    x = [0, 1, 2, 3, 4, 5, 6, 7, 8]
    y = x[1:9:2]  # y = [1, 3, 5, 7]

列表的切片赋值:
  作用:
    可以改变原列表的排列,可以插入和修改数据
    可以用切片改变列表的对应的元素的值
  语法:
    列表[切片] = 可迭代对象
  说明:
    切片赋值的赋值运算符(=) 的右侧必须是一个可迭代对象
  示例:
    L = [2, 3, 4]
    L[0:1] = [1.1, 2.2]   # L = [1.1, 2.2, 3, 4]
    L[2:] =[3.3, 4.4, 5.5] # L = [1.1,2.2,3.3, 4.4, 5.5]
    L[:] = [3, 4]  # L = [3, 4]
    L[0:0] = [1, 2]  # L = [1, 2, 3, 4]
    L = [3, 4]
    L[2:2] = [5]  # L = [3, 4, 5]
    L[1:2] = "AB"  # L = [3, 'A', 'B', 5]
    L[1:3] = range(10)
切片注意事项
  对于步长不等于1的切片赋值,赋值运算符的右侧的可迭代对象
  提供的元素个数一定要等于切片切出的段数
  如:
    L = [1, 2, 3, 4, 5, 6]
    L[::2] = "ABC"  # 正确
    L[::2] = "ABCD"  # 错误


练习 :
  1. 用字符串 * 星号打印圣诞树
    输入一个整数,代表树干的高度
    如: 
      输入: 2
    打印:
       *
      ***
       *
       *
    如: 
      输入: 3
    打印:
        *
       ***
      *****
        *
        *
        *
  2. 算出 100 ~ 999 以内的水仙花数(Narcissistic
      Number)
    水仙花数是指 百位的3次方 + 十位的3次方 + 个位的3次方
      等于原数的整数
    如:
      153 = 1**3 + 5**3 + 3**3
    求所有的水仙花数
  3. 写一个程序,任意输入一个整数,判断这个数是否是素数
     (primes)
     素数也叫质数,是只能被1和自身整除的正整数
     提示:
       用排除法:
          当判断x是否为素数时,只要让x分别与
            2, 3, 4... x-1  相除,只要能整除,则x不是
          素数.否则x为素数
  