1.模型 - Models
    1.ORM框架
        ORM : Object Relationship Mapping
        三大特点：
            1.表 到 类的映射
            2.数据类型的映射
            3.关系映射
2.创建 和 配置数据库
    1.创建数据库
        create database webdb default charset utf8 collate utf8_general_ci;
    2.数据库的配置
        在 settings.py 中
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
            }
        }
        1.ENGINE
            指定数据库的引擎，mysql引擎如下：
                "django.db.backends.mysql"
        2.NAME
            指定要连接的数据库的名称
            "NAME":"webdb"
        3.USER
            指定登录到数据库的用户名
            "USER":"root"
        4.PASSWORD
            指定登录到数据库的密码
            "PASSWORD":"123456"
        5.HOST
            指定要连接的主机
            "HOST":"localhost"
        6.PORT
            指定要连接的主机上的端口号
            "PORT":"3306"
    3.数据库的迁移
        1.python manage.py makemigrations
            作用：
                将每个应用下的models.py文件生成一个中间文件，并保存在migrations文件夹中
        2.python manage.py migrate
            作用： 
                将每个应用下的migrations目录中的中间文件同步回数据库
    4.编写Models
        1.Models的语法规范
            语法：
                class CLASSNAME(models.Model):
                    NAME = models.FIELD_TYPE(FIELD_OPTIONS)
            1.CLASSNAME 
                实体类名，表名组成一部分
                默认表名组成规范：
                    应用名称_classname
            2.NAME 
                属性名，映射回数据库就是字段名
            3.FIELD_TYPE
                字段类型：映射到表中的字段的类型
                1.BooleanField()
                    编程语言中：使用True或False来表示值
                    在数据库中：使用1或0来表示具体的值
                    数据库的类型：tinyint
                2.CharField()
                    数据库类型：varchar
                    注意：必须要指定max_length参数值
                3.DateField()
                    作用：表示日期
                    编程语言中：使用字符串来表示具体值
                    数据库类型：date
                4.DateTimeField()
                    作用：表示日期和时间
                    数据库类型：datetime
                5.DecimalField()
                    编程语言中：使用小数表示该列的值
                    在数据库中：使用小数
                    数据库类型：decimal
                    示例：
                        money = models.DecimalField(
                            max_digits = 7,    ---  总7位
                            decimal_places = 2,    ---  小数两位
                        )
                6.FloatField()
                    编程语言中和数据库中都使用小数表示值
                    数据库类型：float
                7.EmailField()
                    编程语言和数据库中使用字符串
                    数据库类型：varchar
                8.IntegerField()
                    编程语言和数据库中使用整数
                    数据库类型：int 
                9.URLField()
                    编程语言和数据库中使用字符串 
                    数据库类型：varchar
                10.ImageField()
                    作用：在数据库中为了保存图片的路径
                    编程语言和数据库中使用字符串
                    示例：
                        image = models.ImageField(
                            upload_to = "static/image",
                        )
                        upload_to:指定图片的上传路径，在后台上传时会自动的将文件保存在指定的目录下
                11.TextField()
                    作用：表示大量数据
                    编程语言和数据库中使用字符串 
                    数据库类型：text
            4.FIELD_OPTIONS
                字段选项，指定创建的列的额外的信息
                允许出现多个字段选项，多个选项之间使用 , 隔开
                1.primary_key
                    如果设置为True，表示该列为主键
                2.null
                    如果设置为True，表示该列值允许为空
                    默认为False
                3.default
                    设置所在列的默认值
                4.db_index
                    如果设置为True，表示为该列增加索引
                5.unique
                    如果设置为True，表示该列的值唯一
                6.db_column
                    指定列的名称，如果不指定的话则采用属性名作为列名
            5.相关指令
                1.通过数据库自动导出models
                    python manage.py inspectdb > xxx.py 
3.数据的CRUD
    1.增加数据
        1.Entry.objects.create(属性=值, 属性=值)
            返回值：返回创建好的实体对象
        2.创建Entry对象，并调用 save() 进行保存
            obj = Entry(属性=值, 属性=值)
            obj.属性 = 值
            obj.save()
            无返回值，保存成功后，obj会被重新复制
        3.使用字典创建对象，并调用save()进行保存
            dic = {
                "属性1":"值",
                "属性2":"值2",
            }
            obj = Entry(**dic)
            obj.save()
    2.查询数据
        通过 Entry.objects 属性 调用查询接口
            Entry.objects.all()
            Entry.objects.get()
            Entry.objects.filter()
            ...
        1.基本查询操作
            方法：all()
            用法：Entry.objects.all()
            偶用：查询Entry实体中所有的数据
                select * from xxx
            返回值：QuerySet
        2.查询返回指定列
            方法：values("列1", "列2")
            用法：Entry.objects.values(...)
            作用：查询部分列的数据并返回
                select 列1,列2 from xxx 
            返回值：QuerySet 
                会将查询出来的数据封装到字典中，在封装到列表中
        3.查询返回指定列 
            方法：values_list("列1", "列2")
            用法：Entry.objects.values_list(...)
            返回值：QuerySet
                会将查询出来的数据封装到元组中，再封装到列表中
        4.排序查询
            方法：order_by
            用法：Entry.objects.order_by("-列","列")
            说明：
                默认是按照升序排序，降序排序则需要在列前增加"-"表示
        5.根据条件查询部分数据
            方法：filter(条件)
            语法：Entry.objects.filter(条件)
                返回值：QuerySet
            示例： 
                authors = Author.objects.filter(id=1, isActive=True)
            非等值查询的构建，需要使用查询谓词(Field Lookup)
                查询谓词：每一个查询谓词是一个独立的查询功能
                    语法：xxx.filter(属性__查询谓词=值)    
                1.__exact:等值匹配
                    Author.objects.filter(id_exact=1)
                2.__contains:包含指定值
                    Author.objects.filter(name_contains="w")
                    select * from author where name like "%w%
                3.__gt:大于
                    Author.objects.filter(age_gt=50)
                4.__gte:大于等于
                5.__lt:小于
                6.__lte:小于等于
                7.__in:查找数据是否在指定范围内
                    Publisher.objects.filter(country__in=["中国", "日本", "韩国"])
                    select * from publisher where country in ("中国", "日本", "韩国")
                8.__range:查找数据是否在指定的区间范围内
                    Author.objects.filter(age__range=(35,50))
        6.不等的条件筛选
            语法：exclude(条件)
            用法：Entry.objects.exclude(条件)
        7.查询只返回一条数据
            语法：get(条件)
            用法：Entry.objects.get()
            注意：
                该方法只能返回一条数据
                查询结果多于一条数据的话，则抛异常
                查询结果如果没有数据的话，则抛异常
        8.聚合查询
            1.不带分组
                语法：aggregate()
                用法：Entry.objects.aggregate(名=聚合函数("列"))
                聚合函数：
                    from django.db.models import Sum, Avg, Count, Max, Min 
            2.带分组
                语法：annotate()
                用法：
                    Entry.objects
                    .values("分组列名", "分组列名")
                    .annotate(名=聚合函数("列"))
                    .values("查询列名")
        9.having(条件)
            筛选
    3.修改
        1.修改单个实体
            1.查 
                通过 get() 得到要修改的实体对象
            2.改
                通过 对象.属性 的方式修改数据
            3.保存
                通过 对象.save() 保存数据
        2.修改QuerySet
            直接调用QuerySet的update(属性=值) 实现批量修改
    4.删除
        删除单个对象/查询结果集 都是调用delete()
        1.删除单个对象
            Author.objects.get(id=1).delete()
        2.删除查询结果集
            Author.objects.filter(isActive=Fasle).delete()

4.F查询 和 Q查询
    1.F查询 - F()
        1.作用：
            在执行查询过程中获取某列的值
        2.语法：    
            from django.db.modles import F 
            F("列名")
        3.示例 
            更新Author实体中所有的数据的age+10
            Author.objects.all().update(age=F("age")+10)
    2.Q查询 - Q()
        1.作用 
            在条件中用来实现 or 的操作
        2.语法 
            from django.db.models import Q 
            Q(条件1)|Q(条件2)
        3.示例 
            查询Author表中id=1或age>=80的人的信息

5.原生的数据库操作方法
    1.查询 
        1.语法：
            raw(sql语句)
        2.用法：
            Entry.objects.raw("sql语句")
        3.返回值 
            QuerySet 
    2.增删改
        from django.db import connection
        def doSQL():
            #更新author内的isActive=1
            with connection.cursor() as cursor:
                cursor.execute("update index_author set isActive=1")
            return HttpResponse("xxx")

6.使用后台管理models
    1.后台的配置
        登录地址：http://localhost:8000/admin

        使用指令创建后台管理员
            python manage.py createsuperuser
    2.基本的数据管理
        1.在应用中的admin.py中注册要管理的实体类
            1.admin.py 
                作用：注册要管理的models类
            2.注册Models
                from django.contrib import admin 
                from .models import *

                admin.site.register(Entry)
                admin.site.register(Entry)
        2.定义Models的展现形式
            1.通过实体类的__str__()定义展现名称
                class Author(models.Model):
                    xxx
                    def __str__(self):
                        return self.name
            2.通过 verbose_name 字段选项，修改名称
                name = models.CharField(
                    max_length=30,
                    verbose_name="姓名",
                )
        3.通过Meta内部类 修改展现形式
            class Author(models.Model):
                xxx 

                class Meta:
                    1.db_table
                        指定当前类映射到的表名
                        (设置完成后立马同步回数据库)
                    2.verbose_name
                        定义实体类在后台的名称(单数)
                    3.verbose_name_plural
                        效果同上(复数)
    3.高级的数据管理
        1.在 admin.py 中创建高级管理类并注册
            1.声明高级管理类
                class EntryAdmin(admin.ModelAdmin):
                    pass
            2.注册高级管理类    
                admin.site.register(Entry, EntryAdmin)
        2.可实现的高级管理功能
            1.list_display:定义在列表页上显示的字段
                list_display = ("name", "age", "email")

            2.list_display_links:定义在列表页中能连接到详情页的字段们
                list_display_links = ("name", "email")

            3.list_editable:定义在列表页中就允许编译的字段们
                注意：取值不能出现在list_display_links中
                list_editable = ("age",)

            4.list_filter:列表页的右侧增加一个过滤器实现筛选
                list_filter = ("name", "email")

            5.search_fields:添加允许被搜索的字段们
                search_fields = ("name","email")

            6.fields:定义在详情页要显示的字段及其顺序
                fields = ("isActive", "name", "email")

            7.fieldsets:定义在详情页中的字段分组
                注意：fieldsets 属性 和 fields 不能共存
                fieldsets = (
                    #分组1
                    ("基本选项",{
                        "fields":("name","email"),
                        "classes":("collapse",)
                    }),
                    #分组2
                    ("可选选项",{
                        "fields":("age","isActive"),
                    }),
                )    

            8.date_hierarchy:在列表页中增加一个时间分层选择器
                date_hierarchy = "publicate_date"
        