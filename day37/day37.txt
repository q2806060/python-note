1.进程状态
    S：可中断阻塞
    D：不可中断阻塞（系统进程）
    T：暂停
    R：运行
    Z：僵尸
    <：较高优先级
    N：较低优先级
    +：前台进程（在终端运行，能够被终端控制的进程）
    s：会话组组长（进程也分组，同一个终端下的所有进程都在一个组）

2.进程的运行特征
    1.可使用计算机的多核资源
    2.计算机分配资源的最小单位（CPU，内存）
    3.每个进程空间独立，有自己的资源
    4.进程之间的运行互不干扰，相互独立

3.利用os模块创建进程
    1.方法名：pid = os.fork()
        功能：创建新的进程
        返回值：
            1.创建进程失败：负数
            2.创建进程成功
                1.原进程中返回新进程的PID号
                2.新进程中返回0

4.关于fork()
    1.子进程从fork下一句开始执行
    2.父子进程各自独立运行，运行顺序不一定
    3.if结构和fork()固定搭配，通过返回值不同，让父子进程分别做自己的事情
    4.子进程会复制父进程全部代码和空间，包括fork()之前的资源
    5.父子进程的空间互不影响，各自修改各自空间内容

5.进程函数(os)
    1.os.getpid()：获取当前进程的PID号
    2.os.getppid()：获取父进程的PID号
    3.os._exit([0 or 1]) 及 sys.exit(['str']：退出当前进程 0 正常退出，1 异常退出
    
6.孤儿进程
    父进程先于子进程退出，此时子进程就是孤儿进程（被系统进程收养）

7.僵尸进程
    1.子进程先结束，且父进程没有处理子进程退出行为，此时子进程为僵尸进程
    2.大量僵尸进程的后果：虽然进程结束了，但是会存留部分的进程信息在内存中，耗费系统资源
    3.避免僵尸进程的方法
        1.让父进程处理子进程
            pid, status = os.wait()
            功能：父进程中阻塞，等待子进程退出并处理
            返回值：pid 子进程PID号
                   status 退出状态（0正常，1异常）
        2.二级子进程
            让一级子进程先退出，二级变成了孤儿进程被收养，父进程处理一级子进程的退出（避免一级子进程称为僵尸）




































