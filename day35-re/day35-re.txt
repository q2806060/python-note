1.正则表达式
    1.应用场景
        1.在1个文件/字符串中，找到qq邮箱地址
        2.在nginx访问日志中，提取出所有的ip地址
    2.定义
        用一些具有特殊含义的符号组合到一起，来描述字符/字符串的方法
    3.应用范围
        1.对文本内容（字符串）的定位、提取、替换
        2.web后端框架Django路由
        3.Python爬虫文本匹配
        4.  ...
    4.优点：
        方便处理文本，支持语言众多，使用灵活多样

2.re模块使用流程
    1.导入模块
    2.re模块的findall()方法匹配字符串

3.元字符的使用
    1.普通元字符
        无特殊含义的字符
        匹配规则：每个字符匹配对应的自身字符
    2.或元字符： |
        匹配规则：匹配 | 两边的任意1个正则表达式
    3.匹配任意一个字符： .
        匹配规则：匹配任意一个字符（不包括换行符\n）
    4.匹配字符串的开始位置： ^
        匹配规则：匹配目标字符串的开始位置，即以规定字符串开头
        例：re.findall('^hi', 'hi,dsdaa,dd,af,ef,a,d')  ---> ['hi']
    5.匹配字符串的结尾位置： $
        匹配规则：匹配目标字符串的结束位置，即以规定字符串结尾
        例：re.findall('hi$', 'dsdaa,dd,af,ef,a,d ,hi')  ---> ['hi']
    6.匹配重复
        1. x*   匹配一个字符x出现0次或多次    abc* ---> ab abc abcc abccc
        2. x+   匹配一个字符x出现1次或多次    abc+ ---> abc abcc abccc
        3. x{n} 匹配一个字符出现了n次         ab{3}c ---> abbbc
        4. x{m,n} 匹配一个字符出现了m~n次     ab{1,3}c  ----> abc abbc abbbc
        5. x?   匹配一个字符出现0次或1次      ab?c   ---->  ac  abc
    7.匹配字符集
        [abc123] ---> a b c 1 2 3
        [a-z]  ---->  所有小写字母
        [A-Z]  ---->  所有大写字母
        [0-9]  ---->  数字
        [a-zA-Z0-9_]  ---->  数字，字母，下划线
    8.[^......]   ---->  匹配指定字符外的任意字符
    9.\d ： 任意一个数字字符
      \D ： 任意一个非数字字符
    10.\w ： 匹配数字、字母、_
       \W ： 匹配特殊字符
    11.\s ： 空白字符([\n \t \v \r])
       \S ： 非空白字符
       匹配所有字符(包括\n) ：[\s \S]
    12.\A ： 字符串开头匹配
       \Z ： 字符串结尾匹配
        绝对匹配，保证正则表达式匹配目标字符串的全部内容
        re.findall('\A\d+-\d+\Z','1000-2000')
        只有传入字符的开头到结尾满足条件，才会输出结果

4.元字符总结
    1.匹配单个字符
        .   [abc]   [^abc]  \d  \D  \s  \S  \w  \W 
    2.匹配数量
        *   +   ?   {n} {m,n}
    3.匹配位置 
        ^   $   \A  \Z 
    4.其他
        | ： 或
        ()： 分组

5.贪婪匹配和非贪婪匹配
    1.贪婪模式
        正则表达式重复匹配，默认总是尽可能多的往后匹配内容
        * + ? {m,n}
    2.非贪婪模式
        尽可能少的匹配内容
        *? +? ?? {m,n}?

6.正则表达式分组
    1.使用()可以为正则表达式建立分组
    2.子组是正则表达式的一部分，子组需要在整体能够匹配内容的前提下发挥作用











