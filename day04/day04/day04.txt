day03 回顾
  字符串 str
    一个不可变的序列容器
    存储的是文字的编码值(0~65536)
  字面值
    ''  ""  '''''' """"""
    'hello'  "world" '''ABCD'''   "ABCD"
    '\n'
  转义字符  \  
  \'   \"   \\    \n   \r    \t
  '\0'    值为 0
  '0'     值为 0x30(48)
  'A'     值为 0x41
  'a'     值为 0x61
  \0oo
  \xXX
  \uXXXX
  \uXXXXXXXX

ascii 编码表(0~127)
unicode16编码(0~65535)
unicode32编码(0~2**32-1)

原始字符串  raw string
  r'C:\newfile.txt'

运算:
  +   +=  *   *= 
  < <= > >= == !=
  [整数表达式] 索引
  [开始整数: 结束整数 : 步长]  切片 slice
  in / not in 运算符


函数:
  len(x)  
  max(x)
  min(x)
  ord(单个字符)
  chr(整数编码值)
  bin(x)  返回二进制
  oct(x)
  hex(x)
  str(obj='')

字符串的方法: 
   对象.方法名(方法传参)
   S.isdigit()
   S.isalpha()
   S.isspace()
   S.center()
   S.count(字符串, 开始索引, 结束索引(不包含结束))
   S.find(字符串, ...)
   S.strip()
   S.lstrip()
   S.rstrip()
   S.replace()
   S.startswith()
   S.endswith()
   详见: help(str)





day04 笔记
  字符串格式化表达式
  作用:
    生成一定格式的字符串
  运算符:
    %
  语法格式:
    格式字符串 % 参数值
    格式字符串 % (参数值1, 参数值2, 参数值3)
  示例:
    fmt = "姓名: %s, 年龄: %d"
    print(fmt % ('Tarena', 15))  # 姓名: Tarena, 年龄: 15
    print(fmt % ('小张', 20))
    print("这个学生的成绩是: %d" % 99)

格式化字符串中的占位符和类型码:
  %s     转为字符串,使用str(x) 函数转换
  %r     转为字符串,使用repr(x) 函数转换
  %c     整数转为单个字符
  %d     数字转为十进制整数
  %o     整数转为八进制整数
  %x     整数转为十六进制整数(字符a-f小写)
  %X     整数转为十六进制整数(字符A-F大写)
  %e     指数浮点数(e小写), 如:2.9e+10
  %E     指数浮点数(E大写), 如:2.9E+10
  %f, %F 转为十进制浮点数
  %g, %G 十进制形式浮点数或指数浮占数自动转换
  %%     等同于一个%字符

占位符 % 和类型码之间的格式语法 
   % [- + 0 宽度.精度] 类型码
   -     左对齐(默认为右对齐)
   +     显示正号
   0     左侧空白位置补零
   宽度   整个数据输入的宽度
   精度   保留小数点后多少位(默认为6位))
  
  示例:
    "%10d" % 123   # '       123'
    '%-10d % 123   # '123       '
    '%10s' % 'abc' # '       abc'
    '%-5s' % 'abc' # 'abc  '
    "%+d" % 123    # '+123'
    '%+010d' % 123  # '+000000123'
    '%f' % 3.1415926535
    '%.10f' % 3.1415926535
    '%7.2f' % 3.1415926535
练习:
  输入三行文字,让这三行文字依次以 20个字符的宽度右对齐
  输出
    如:
      请输入第1行: hello world!
      请输入第2行: abcd
      请输入第3行: a
    输出结果为:
               hello world!
                       abcd
                          a
  做完上面的题后再思考:
    能否以最长字符串的长度进行右对齐显示(左侧填充空格)


        
循环语句
  循环语句
    while语句
    for 语句

问题:
  输入一个整数n,写程序打印如下:
    这是第1行
    这是第2行
    这是第3行
    ...
    这是第n行
  分析:
    i = 1
    if i <= n:
        print("这是第%d行" % i)
        i += 1
    if i <= n:
        print("这是第%d行" % i)
        i += 1
    if i <= n:
        print("这是第%d行" % i)
        i += 1
    ...

while语句
  作用:
    根据一定条件,重复的执行一条语句或多条语句
  语法:
    while 真值表达式:
        语句块1(*此部分的语句可能会重复执行多次)
    else:
        语句块2
  说明:
    1. 先执行真值表达式,判断布尔值为True或False
    2. 如果真值表达式值为True,则执行语句块1,再后再返回
       到第1步重复判断
    3. 如果真值表达式值为False, 则执行else子句内的语句
       块2,如果没有else子句则不执行,然后while语句执行
       结束
    

练习:
  1. 打印 1 ~ 20的整数, 不限格式
  2. 打印 1 ~ 20的整数,打印在一行内
    提示:
       print(i, end=' ')
  3. 打印1 ~ 20的整数,每行打印5个,打印4行
     1 2 3 4 5
     6 7 8 9 10
     11 12 ...
     ....
  

练习:
  输入任意一个数n,此数代表结束的数(不包含n)
    打印 从 0开始 至 n的偶数
      0 2 4 6 8 ..... n-1/n-2
    打印在一行内
  
  2. 写一个程序
    输入一个开始的整数 用变量begin绑定
    输入一个结束的整数用变量end绑定
    打印 从 begin 到 end(不包含end) 的每个整数,在印在
    一行内
      如:
        请输入开始值: 8
        请输入结束值: 20
      打印:
        8 9 10 11 12 13 .... 19

    思考,如何实现每5个数字打印在一行内,打印多行
      提示: 多加一个变量来记录打印的个数




  3. 写程序 求:
       1 + 2 + 3 + 4 + ..... + 99 + 100
      的和,并打印结果:
         5050
      提示:
        用一个变量初始值为0来累加结果
    


while 语句 注意事项
  1. 要控制循环的真值表达式来防止死循环
  2. 通常用真值表达式内的循环变量来控制循环条件
  3. 通常在循环语句内部改变循环变量来控制循环的次数和变量
     的走向

  
while 语句的嵌套
  while 语句本身是语句,和其它语句一样,可以嵌套到任何
  复合语句中

  嵌套示意:
    while 真值表达式1:
        ....
        while 真值表达式2:
            ....
        else:
            ...
        ...
    else:
        ...

  示例:
    # 打印 1 ~ 20 的整数,打印在一行内
    # 打印 10 行
    1 2 3 4 5 6 ..... 19 20
  示例见:
    while_embed.py



练习:
  输入一个数,打印指定宽度的正方形
    如:
      输入: 5
    打印:
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5
    如:
      输入: 3
    打印:
      1 2 3
      1 2 3
      1 2 3



break 语句
  问题:
    如果在循环过程中我不相再继续此循环语句的执行了,怎么办?
  语法:
    break
  作用:
    用于循环语句(while,for语句)中,用来终止当前循环的执行
  说明:
    1. 当break语句执行后,此循环语句的break之后的语句将不
       再执行
    2. break 语句通常和if语句组合使用
    3. break 语句终止循环时,循环语句的else子句的语句将不
       会执行
    4. break语句只能终止当前循环语句的执行,如果有循环嵌套
       时,不会跳出嵌套的外重循环
    5. break 语句只能有在循环语句(while或for语句)的内部
  示例见:
    break.py



死循环
  死循环是指循环一直成立的循环
  死循环通常用break语句来终止循环
  死循环的else子句永远不会执行

示例:
    i = 0
    while True:
        print(i)
        if i == 20:
            break
        i += 1

练习:
  任意输入一些整数,当输入负数时结束输入
  当输入完成后,打印您输入的这些数的和
  如:
    请输入: 1
    请输入: 2
    请输入: 3
    请输入: 4
    请输入: -1  # 结束
  打印:
    您刚才输入的正整数的和是: 10
      

练习:
  输入一个整数n, 打印一个宽度和高度都为n个字符的长方形
  如: 
    输入: 4
  打印:
    ####
    #  #
    #  #
    ####
  如: 
    输入: 6
  打印:
    ######
    #    #
    #    #
    #    #
    #    #
    ######



练习:
  1. 用程序while 语句生成如下字符串:
        字符串1:  'ABCDEFG.......XYZ'
        字符串2:  'AaBbCcDdEeFfGg......XxYyZz'
    提示:
        s = ''
        s += 'A'  # s += chr(65)
        s += 'a'  # s += chr(97)
  2.  用while语句实现打印三角形,输入一个整数n表示三角形
    直角边的宽度和高度,打印相应的三角形
    如:
      请输入三角形的宽度: 4
    第一种打印:
      *
      **
      ***
      ****
    第二种打印:
         *
        **
       ***
      ****
    第三种打印:
      ****
       ***
        **
         *
    第四种打印:
      ****
      ***
      **
      *


  3. 输入Unicode的起始值用变量 begin绑定
     输入终止值用变量end绑定
       打印这些字符所应用的文字,结果如下:
    如:
      请输入起始值: 48
      请输入终止值: 57
    打印如下:
      十进制编码    十六进制编码  文字
        48           0x30      0
        49           0x31      1
        50           0x32      2
        ....




