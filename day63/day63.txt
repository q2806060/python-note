1.重定向 - redirect()
    1.由服务器通知浏览器向一个新的地址发送请求
    2.语法
        form flask import redirect
        redirect("重定向地址")
    3.特点
        产生了两次响应

2.关系映射
    1.一对多
        1.一对多在数据库中的体现
            靠"主外键"关系来实现一对多
            "一"表中
        2.在Flask-SQLAlchemy上的实现
            在"多"实体类中增加对"一"的实体类的引用
            在"一"实体类中增加"关联属性"和"反向引用关系属性"
            1.在"多"实体类中 
                增加一个列，引用自"一"表(类)的主键列
                外键列名=db.Column(db.Integer, db.ForeignKey('主键表.主键列'))
            2.在"一"实体类中 
                增加关联属性和反向引用关系属性
                目的：在编程语言中创建类(对象)与类(对象)之间的关系
                1.关联属性 
                    在"一"实体中，要通过哪个<<属性>>来获取到对应的"多"的实体对象们
                2.反向引用关系属性
                    在"多"实体中，要通过哪个<<属性>>来获取到对应的"一"的对象的实体
                语法：在"一"实体类中增加 
                    属性名=db.relationship("多的实体类名", backref="自定义一个反向引用关系属性名", lazy="dynamic")
                    lazy的取值：
                        1.select
                            首次访问时加载关联数据
                        2.immediate
                            源对象加载后立马加载关联数据(使用连接)
                        3.subquery
                            效果同上(使用子查询)
                        4.noload
                            永不加载
                        5.dynamic
                            不加载记录，但提供加载记录的查询
    2.一对一
        1.一对一在数据库中的设置
            关联两张表中的任意一张表
                1.增加外键，引用另一张表主键
                2.并且要实时唯一约束
        2.实现
            1.在任意一张表中增加外键和唯一约束
                外键列名 = db.Column(db.Integer, db.ForeignKey("主表.主键"), unique=True)
            2.在另一个实体类中增加关联属性和反向引用关系属性
                属性名 = db.relationship("关联的实体类名", backref="自定义一个反向引用关系属性名", uselist=False)
                uselist:设置为False，表示关联属性是一个标量，而非一个列表
    3.多对多
        1.在数据库中的实现
            依靠第三张关联表的方式来实现的
        2.在ORM中
            1.创建第三张表

            2.关联属性和反向引用关系
                在关联的两个类的任意一个类中增加：
                    属性名 = db.relationship("关联类名", secondary="第三张关联表名", lazy="dynamic", backref=db.backref("反向引用关系属性名称", lazy="dynamic"))





























