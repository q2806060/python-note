
生成器 Generator:
    生成器是能够动态提供数据的可迭代对象
    生成器是在程序运行时生成数据，与容器类不同，它通常不会再内存中保存大量的数据，而是现用现生成

    种类：
        生成器函数
        生成器表达式
    
    生成器函数：
        含有yield语句的函数是生成器函数，此函数被调用将返回一个生成器对象
        yield 翻译为产生或生成

    yield 语句：
        yield 表达式
        说明：
            yield 用于 def 函数中，目的是将此函数作为生成器函数使用
            yield 用来生成数据，提供迭代器 next(it) 函数使用 

    生成器表达式：
        (表达式 for 变量 in 可迭代对象 [if 真值表达式])
        说明：  
            if 子句可以省略
            for in 子句可以嵌套多个
        作用：
            用推导式的形式创建一个新的生成器
        示例：
            gen = (x ** 2 for x in range(1, 5))
            it = iter(gen)
            next(it)
            ...
            

迭代工具函数：
    zip(iter1[, iter2, iter3, ...])
        返回一个zip对象，此对象用于生成一个元组，此元组的数据分别来自于参数之中的每个可迭代对象，生成元组的个数由最小的可迭代对象决定
    enumerate(iterable, start = 0)
        返回一个enumerate对象，此对象生成的类型为（索引，值）的元组，默认索引从零开始，也可以用第二个参数start指定


字节串：
    序列：str, list, tuple, bytes, bytearray
    字符串（字节序列） bytes
        作用：
            存储以字节为单位的数据
    字节串 bytes:
        创建空字节串的字面值：
            b''
            b""
            b'''''
            b""""""
        创建非空字节串的字面值表示：
            b'AB'
            b'hello'
            b'\x41\x42'
    字节串的构造函数 bytes：
        bytes() 生成一个空的字节串，等同于 b''
        bytes(整数可迭代对象) 用可迭代对象创建一个字节串
        bytes(整数n) 生成n个值为0的字节串
        bytes(字符串， encoding='utf-8') 用字符串的转换编码生成一个字节串

    示例：
        B = bytes()
        B = bytes([65, 66, 67, 68])
        B = bytes(5)
        B = bytes('你好ABC', 'utf-8')
    
    bytes 与 str 的区别：
        bytes 存储字节（0-255）
        str 存储unicode字符

    bytes 与 str 转换：
        编码 encode
        str ------> bytes
        b = s.encode(encoding = 'utf-8')

        解码 decode
        bytes ------> str
        s = b.decode(encoding = 'utf-8')

字节数组 bytearray
    可变的字节序列
    字节数组的构造函数 bytearray:
        bytearray() 生成一个空的字节数组，等同于 b''
        bytearray(整数可迭代对象) 用可迭代对象创建一个字节数组
        bytearray(整数n) 生成n个值为0的字节数组
        bytearray(字符数组， encoding='utf-8') 用字符数组的转换编码生个字节数组

    字节数组的方法：
        B.clear()	                    清空
        B.append(n)	                    追加一个字节(n为0-255的整数)
        B.remove(value)	                删除第一个出现的字节,如果没有出现，则产生ValueError错误
        B.reverse()	                    字节的顺序进行反转
        B.decode(encoding='utf-8')	
        B.find(sub[, start[, end]])	











































































































