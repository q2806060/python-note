
封装 enclosure：
    封装是指隐藏类的实现细节，让使用者不关系这些细节
    目的是让使用者用尽可能少的方法（或属性）操作对象（实例）
    python 的封装是（模拟的封装）


私有属性和方法：
    以双下划綫开头，不以双下划綫结尾的标识符为私有成员，私有成员只能使用方法来进行访问和修改


多态 polymorphic：
    多态是指在有继承/派生关系的类中，调用基类对象的方法，实例能调用到子类的覆盖方法的现象叫多态
    状态：
        静态（编译时状态）
        动态（运行时状态）
    说明：
        python 的全部对象只有运行时状态（动态），没以c++语言里的编译时状态（静态）


面向对象的编程语言的特征：
    1.继承
    2.封装 
    3.多态 



多继承 multiple inheritance:
    多继承是指一个子类继承自两个或两个以上的基类
    class 子类名（基类名1，基类名2....)
    如果两个父类中有同名的方法，而子类中又没有覆盖此方法，调用结果难以确定

多继承的MRO（Method Resolution Order）问题：
    类的__mro__属性：
        用来记录类的方法查找顺序


对象转字符串函数：
    repr(obj) 返回一个符合python语法规则，且能代表此对象的表达式的字符串
        eval(repr(obj)) == obj

    str(obj) 通过给定的对象返回一个字符串（这个字符串通常是给人阅读的）

函数重写：
    在自定义的类内添加相应的方法，让自定义的类创建的实例像内建对象一样进行内建函数操作

对象转字符串函数的重写方法：
    repr() 函数的重写方法：
        def __repr__(self):
            return 字符串
    str() 函数的重写方法：
        def __str__(self):
            return 字符串
    注：必须返回字符串


调用方法说明：
    1.str(obj) 函数先查找obj.__str__()方法，调用此方法返回字符串
    2.如果obj对象没有obj.__str__()方法，则调用obj.__repr__() 返回字符串 
    3.如果obj.__repr__方法不存在，则调用Object类的__repr__方法显示<xxxx>格式的字符串


内建函数重写：
__abs__         abs(obj)
__len__         len(obj)
__reverse__     reverse(obj)
__round__       round(obj)
__complex__
__int__
__float__
__bool__

complex函数说明：
    1.complex(obj) 方法有限调用obj.__complex__()方法返回结果
    2.没有obj.__complex__()方法，则调用obj.__float__返回的值做实部，0j为虚部

bool(x) 重写：
    def __bool__(self):
        ....
    作用：
        用于bool(obj) 函数取值
        用于if 语句的真值表达式中
        用于while 语句的真值表达式中 
    说明:
        1.当自定义类内有__bool__(self) 方法时，以此方法返回的值作为bool(obj) 的返回值
        2.不存在时，返回__len__方法的返回值是否为零来测试布尔值
        3.当__len__方法不存在时，直接返回True



对象的管理属性函数：
    getattr(obj, name[, dfault])
    hasattr(obj, name)
    setattr(obj, name, value)
    delttr(obj, name)


迭代器（高级）：
    可以通过next函数取值的对象
    迭代器协议：
        是指能够使用next函数获取下一项数据，在没有下一项数据时，能触发一个StopIteration异常来终止迭代的约定
    迭代器协议的实现方法：
        def __next__(self):
            .....
    可迭代对象是指能用iter(obj)函数返回迭代器的对象（实例）
    可迭代对象内部需要定义：def __iter__(self) 方法来返回迭代器对象（实例）
























































