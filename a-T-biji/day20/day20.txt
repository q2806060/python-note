day19 回顾
  封装
    私有属性和方法
      双下划线开头,不以双下划线结尾
        __aaa__ 标识符不符合规则
        __aaa   # 符合规则
  多态
    有继承关系的类中,子类方法覆盖父类方法,子类对象调用该方法,
    表现出多态
  多继承 
    语法:
      class 子类名(基类1, 基类2, ....):
            ...
    多继承的存在的问题:
       父类的方法名冲突问题(标识符突冲)
    MRO 方法的查找次序
      __mro__属性
    
    钻石继承/棱形继承
    
    super 函数实质是通过__mro__查找上一级的类

函数重写
  函数名           方法名
  repr(x)       __repr__(self)
  str(x)        __str__(self)
  abs(x)
  len(x)
  reversed(x)
  round(x)
  int(x)
  float(x)
  complex(x)
  bool(x)
  
getattr(obj, name[,default])   v = obj.name
hasattr(obj, name)
setattr(obj, name, v)  # obj.name = v
delattr(obj, name)    # del obj.name

迭代器
  有 def __next__(self)  方法就是迭代器

可迭代对象
  有 def __iter__(self)  方法 就是可迭代对象



异常(高级)
  回顾(可以用于异常的语句有哪儿些)
    try-except  接收异常通知
    try-finally 执行必须要执行的语句
    raise  触发异常,进入异常流程
    assert 断言语句
    with 语句

with 语句
  语法:
    with 表达式1 [as 变量1], 表达式2[ as 变量2], ...:
        语句块
  作用:
    使用于对资源进行访问的场合,确保使用中不管是否发生异常,都
    会执行必须的"清理"操作,并释放资源,如:
       文件使用后自动关闭,线程中锁的自动获取和释放等(线程后面
        会学)
  说明:
    执行表达式,用as 子句中的变量绑定生成的对象
    with语句同try-finally类似,它并不改变程序的异常状态
  示例:
    with.py

环境管理器
  1. 类内有__enter__方法和 __exit__实例方法的类被称为环
     境管理器
  2. 能够用with进行管理的对象必须是环境管理器
  3. __enter__将在进入with语句时被调用并返回由as变量管理的
     实例对象
  4. __exit__ 将在离开with语句时被调用,且可以用参数来判断在
    离开with语句时是否有异常发生并做出相应的处理

示例见:
  with3.py

with语句的应用案例见:
  改进版的 mycopy.py

错误类型 
  内建的错误类型 : ZeroDivisionError, StopIteration, ...
  Exception 类是一切异常类的超类
  自定义的错误类型必须直接或间接的继承自Exception类


运算符重载
  什么是运算符重载
    让自定义的类生成的对象(实例)能够使用运算符进行操作

  作用:
   让自定义的类的实例像内建对象一样进行运算符操作
   让程序简洁易读
   对自定义对象将运算符赋予新的运算规则
  说明:
    运算符重载方法的参数个数的传参都是有固定的含义,不能随便 
    修改形参的个数
算术运算符重载
  方法名                     运算符和表达式  说明
 __add__(self, rhs)          self +  rhs  加法
 __sub__(self, rhs)          self -  rhs  减法
 __mul__(self, rhs)          self *  rhs  乘法
 __truediv__(self, rhs)      self /  rhs  除法
 __floordiv__(self, rhs)     self // rhs  地板除
 __mod__(self, rhs)          self %  rhs  求余(取模)
 __pow__(self, rhs)          self ** rhs  幂运算

  rhs (right hand side)  右手边

二元运算符的重载方法格式:
   def __xxx__(self, other):
        .....
示例见:
  mynumber.py


练习:
  实现两个自定义的列表相加等操作
    class MyList:
        .... 此处自己实现
    L1 = MyList([1, 2, 3])
    L2 = MyList(range(4, 6))
    L3 = L1 + L2
    print("L3=", L3)  # L3=MyList([1, 2, 3, 4, 5])
    L4 = L2 + L1
    print("L4=", L4)  # L4=MyList([4, 5, 1, 2, 3])
    L5 = L1 * 2
    print("L5=", L5)  # L5=MyList([1, 2, 3, 1, 2, 3])



反向算术运算符的重载
  当运算符的左侧为内建类型,右侧为自定义类型运行算术运算符运算
  时,会出现TypeError错误,因无法修改内建类型的代码来实现运算
  符重载, 此时需要使用反向算术运算符重载来完成重载

算术运算符重载
  方法名                     运算符和表达式  说明
 __radd__(self, lhs)         lhs +  self  加法
 __rsub__(self, lhs)         lhs -  self  减法
 __rmul__(self, lhs)         lhs *  self  乘法
 __rtruediv__(self, lhs)     lhs /  self  除法
 __rfloordiv__(self, lhs)    lhs // self  地板除
 __rmod__(self, lhs)         lhs %  self  求余(取模)
 __rpow__(self, lhs)         lhs ** self  幂运算

  lhs (left hand side)  右手边

示例见:
  code/mylist.py



复合赋值算术运算符的重载
  以复合赋值算述运算符 x += y 为例,此运算符会优先调用
    x.__iadd__(y) 方法 ,如果没有__iadd__方法时会将复合赋值
    运算拆解为 x = x + y, 然后再调用 x = x.__add__(y)方法,
    如果不存在__add__方法,则会触发TypeError类型 的错误 
  其它复合赋值算术运算符也具有相同的规则 

复合赋值算术运算符重载
  方法名                     运算符和表达式  说明
 __iadd__(self, rhs)          self +=  rhs  加法
 __isub__(self, rhs)          self -=  rhs  减法
 __imul__(self, rhs)          self *=  rhs  乘法
 __itruediv__(self, rhs)      self /=  rhs  除法
 __ifloordiv__(self, rhs)     self //= rhs  地板除
 __imod__(self, rhs)          self %=  rhs  求余(取模)
 __ipow__(self, rhs)          self **= rhs  幂运算

  rhs (right hand side)  右手边

示例见:
  mylist2.py
  mylist3.py

问题:
  # ------- 以下用列表实现-----------
  L = [1, 2, 3]
  def f1(lst):
      lst += [4, 5, 6]
      # list类内有__iadd__方法,调用lst.__iadd__(xxx)
      # __iadd__方法内直接改变原列表
  f1(L)
  print(L)  # [1, 2, 3, 4, 5, 6]

  # ------- 以下用元组实现-----------
  L = (1, 2, 3)
  def f1(lst):
      lst += (4, 5, 6)
      # tuple类内没有__iadd__方法 调用 lst = lst.__add__(xxx)
      # __add__方法创建一个新的元组,原来元组没改
  f1(L)
  print(L)  # (1, 2, 3)


比较运算符的重载:
   方法名                   运算符和表达式  说明
 __lt__(self, rhs)          self <  rhs  小于
 __le__(self, rhs)          self <= rhs  小于等于
 __gt__(self, rhs)          self >  rhs  大于
 __ge__(self, rhs)          self >= rhs  大于等于
 __eq__(self, rhs)          self == rhs  等于
 __ne__(self, rhs)          self != rhs  不等于
  注:
    比较运算符通常返回布尔值 True 或 False

位运算符重载
   方法名                   运算符和表达式  说明
 __and__(self, rhs)          self &  rhs  位与
 __or__(self, rhs)           self |  rhs  位或
 __xor__(self, rhs)          self ^  rhs  位异或
 __lshift__(self, rhs)       self << rhs  左移
 __rshift__(self, rhs)       self >> rhs  右移

反向位运算符重载
   方法名                   运算符和表达式  说明
 __rand__(self, lhs)          lhs &  self  位与
 __ror__(self, lhs)           lhs |  self  位或
 __rxor__(self, lhs)          lhs ^  self  位异或
 __rlshift__(self, lhs)       lhs << self  左移
 __rrshift__(self, lhs)       lhs >> self  右移

复合赋值位运算符重载
   方法名                   运算符和表达式  说明
 __iand__(self, rhs)          self &=  rhs  位与
 __ior__(self, rhs)           self |=  rhs  位或
 __ixor__(self, rhs)          self ^=  rhs  位异或
 __ilshift__(self, rhs)       self <<= rhs  左移
 __irshift__(self, rhs)       self >>= rhs  右移

一元运算符的重载
   方法名                   运算符和表达式  说明
 __neg__(self)               -self       负号
 __pos__(self)               +self       正号
 __invert__(self)            ~self       取反

  语法:
    class 类名:
        def __xxx__(self):
           ....
  示例见:
    mylist4.py


in / not in 运算符重载
  方法名:                   表达式和运算符    说明
 __contains__(self, e)        e in self    成员运算


索引 和切片运算符
  []

重载方法
  方法名                   运算符和表达式  说明
 __getitem__(self, i)     v = self[i]  索引/切片取值
 __setitem__(self, i, v)  self[i] = v  索引/切片赋值
 __delitem__(self, i)     del self[i]  del 语句删除
                                       索引或切片
  作用:
    让自定义的类创建的对象支持索引或切片操作
  示例见:
    mylist6.py
    mylist7.py

slice 构造函数
  作用:
    用于创建一个slice切片对象,此对象存储一个切片的起始值,
    终止值,步长信息
  格式:
    slice(start=None, stop=None, step=None)
  slice对象的属性
    s.start 切片的起始值, 默认为None
    s.stop  切片的终止值, 默认为None
    s.step  切片的步长, 默认为None

特性属性 @property
  实现其它语言拥有的 getter 和 setter 功能

  作用:
    用来模拟一个属性
    通过@property 装饰器可以对模拟属性的取值和赋值加以控制
  示例见:
    property1.py
    property2.py
    property3.py


PEP8编码规范
  文档参见:
    PEP8编码规则.html

练习:
  实现有序集合类 OrderSet()  能实现两个集合的交集 &,并集 |,
    补集 -, 对称补集 ^, ==, !=, in/ not in 等 操作
    规则写集合set 类完全相同
    要求:集合内部用list存储
    class OrderSet:
        def __init__(self, iterable=()):
            self.data = list(iterable)
        ... # 以下自己完成
    s1 = OrderSet([1, 2, 3, 4])
    s2 = OrderSet([3, 4, 5])
    print(s1 & s2)  # OrderSet([3, 4])
    print(s1 | s2)  # OrderSet([1, 2, 3, 4, 5])
    print(s1 ^ s2)  # OrderSet([1, 2, 5])
    if OrderSet([1,2,3]) != OrderSet([1,2,3,4]):
        print("不相等")
    if s2 == OrderSet([3,4,5]):
        print("s2 == OrderSet([3,4,5])＂)
    if 2 in s1:
        print("2 in s1")
答案见:
  orderset.py

