
装饰器 decorators(专业提高篇)
    作用：
        在不修改被装饰函数的源代码和不改变被装饰函数的调用方法的基础上为函数添加新的功能或改变原有功能

    装饰器的语法：
        def 装饰器函数名(fn):
            语句块
            return 函数对象
        
        @装饰器函数名<换行>
        def 被装饰函数():
            语句块
        
    示例：
        def mydeco(fn):
            def fx():
                print('+++++++++++')
                fn()
                print('-----------')
            return fx
        @mydeco
        def myfun():
            print('myfun被调用')


函数的文档字符串
    函数内第一次未赋值给任何变量的字符串是此函数的文档字符串
    语法：
        def 函数名（形参列表）：
            '函数的文档字符串'
            语句块
    示例：
        def myfun(a, b, c):
            '''这是一个自定义的函数
            a为第一个参数
            ...
            '''
    说明：
        文档字符串可以在交互模式下用help(函数名)查看
        函数名的文档字符串绑定在函数的_doc_属性中


函数的__doc__属性： 
    作用：
        用于绑定函数的文档字符串
    
函数的__name__属性：
    作用：
        用来记录函数的

函数定义语句(def语句)的完整语法：
    [@装饰器名1]
    [@装饰器名2]
    [...]
    def 函数名([位置形参], [*元组形参], [命名关键字形参], [**字典形参]):
        '''文档字符串'''
        语句块


模块 module
    模块是一个包含一系列数据、函数、类等组成的程序组
    模块是一个文件，模块文件名通常以.py结尾

    作用：
        让一些相关的函数、数据、类有逻辑的组织在一起，使逻辑结构更加清晰
        模块中的数据、函数和类等可以提供给其他模块使用
    模块的分类：
        内置模块(builtins)在解析器的内部可以直接使用
        标准库模块，安装python时已经安装且可以直接使用
        第三方模块(通常为开源),需要自己安装
        用户自己编写的模块



模块的导入语句
import 语句：
    import 模块名1 [as 模块新名1], 模块名2 [as 模块新名1], ...
    
dir(obj) 函数，返回obj对象所有的属性的字符串列表
help(obj) 函数，可以查看模块的文档字符串


from import 语句:
    语法：
        from 模块名 import 模块属性名1 [as 属性新名1], .....
    

from import * 语句：
    语法：
        from 模块名 import *
    作用：
        将某个模块的所有属性导入到当前模块作用域

dir函数：
    dir([对象])
    作用：
        如果没有参数调用，则返回当前作用域内所有变量的列表
        如果给定一个对象作为参数，则返回这个对象的所有变量的列表
            对于一个模块，返回这个模块的全部属性（变量）
            对于一个类对象，返回这个对象的所有


sys 模块:
    运行时系统相关的信息（runtime system）
    

























































































