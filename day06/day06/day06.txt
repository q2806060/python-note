day05回顾
  for语句(循环语句)
    可迭代对象
        字符串str
        range函数调用后返回的对象
        列表 list
    range(stop)
    range(start, stop)
    range(start, stop, step)
  for 语句可以嵌套

  continue语句
    终止当前循环,再次进入下一次循环

  for语句 while语句
    continue语句, break语句

列表 list
  列表是 可变的 序列 容器

  创建列表的方式:
    []
    [1,2,3,4]
    [1,2,[3,4,[5,6,7]]]
    list() 
    list(range(10))
  运算:
    +   +=   *   *=
       列表 += 可迭代对象
    < <= > >= == !=
    in / not in 
    索引和切片
      v = L[i]  # 返回元素
      v = L[1:10:2]  # 返回列表
      L[i] = 100
      L[1:4] = range(10)




day06笔记
  python3 中常用于序列的函数
    len(x)   返回序列的长度
    max(x)   返回序列的最大值元素
    min(x)   返回序列的最小值元素
    sum(x)   返回序列中所有元素的和(元素必须是数值类型)
    any(x)   真值测试,如果序列中其中一个值为真值,则返回
             True,否则返回False
    all(x)   真值测试,序列中所有元素的值都为真值,则返回
             True,否则返回False

  max用法见:
     >>> help(max)
  示例:
    L = [8, 3, 6, 2]
    print(sum(L))   # 19
    print(min(L))   # 2
    print(max(L))   # 8


练习:
  1. 输入三个数存于列表中,打印出这三个数的最大值,最小值
    和平均值.
  2. 写程序,让用户循环输入一些整数,当输入-1时结束输入,
  将这些整数存于列表L中
     1) 打印您共输入了几个有效的数(不包含结束时输入的负数)
     2) 打印您输入的数的最大数是多少?

    试想不用max,min, sum等函数能否实现上述功能?
   
python3中常用的列表方法:
  详见:
    >>> help(list)
  文档参见:
    python_base_docs_html/list.html

练习:
  写一个程序,让用户输入很多个正整数,当输入小于零时结束输入
    (要求不允许输入重复数)
    1) 打印这些数的和
    2) 打印这些数中最大的一个数
    3) 打印这些数中第二大的一个数
    4) 删除最小的一个数
  做完上题后思考:
    1. 如何保证原数据的顺序不变?
    2. 如何强制让用户不输入重复的数




del 语句用于删除列表的元素
  语法:
    del 列表[整数表达式]
    del 列表[切片]
  示例:
    L = list(range(5, 10))
    del L[-1]  # 删除 9
    del L[0]   # 删除 5
    L = list(range(1, 10))
    del L[::2]  # 删除1, 3, 5, 7, 9

练习:
  输入多行文字,存入列表中
    每次输入后回车算作一行
    任意输入多行,当直接输入回车键(即空行) 结束输入
  要求:
    1. 按原输入的顺序把输入内容在终端上显示
    2. 打印出您共输入了多少行文字
    3. 打印您共输入了多少个字符

深拷贝 deep copy 和 浅拷贝 shallow copy

浅拷贝
  是在复制过程中,只复制一层变量,不会复制深层变量绑定的对象
  的复制过程
  如:
    L1 = [1, 2, [3.1, 3.2]]
    L2 = L1.copy()  # 浅拷贝
    print(L1)  #  [1, 2, [3.1, 3.2]]
    print(L2)  #  [1, 2, [3.1, 3.2]]
    L2[2][0] = 3.14
    print(L2)  # [1, 2, [3.14, 3.2]]
    print(L1)  # [1, 2, [3.14, 3.2]]

深拷贝
  复制整个依懒的变量
  如 :
    import copy  # 导入复制模块
    L1 = [1, 2, [3.1, 3.2]]
    L2 = copy.deepcopy(L1)  # 调用deepcopy函数实现深拷贝
    print(L1)  #  [1, 2, [3.1, 3.2]]
    print(L2)  #  [1, 2, [3.1, 3.2]]
    L2[2][0] = 3.14
    print(L2)  # [1, 2, [3.14, 3.2]]
    print(L1)  # [1, 2, [3.1, 3.2]]  # L1不变

三种情况:
  L1 = [1, 2, [3.1, 3.2]]
  L2 = L1  # 1.不拷贝  L2 和 L1同时绑定同一个对象
  L3 = L1.copy()  # 浅拷贝

  import copy
  L4 = copy.deepcopy(L1)  # 深拷贝


列表与字符串比较
  1. 列表和字符串都是序列,元素之间有先后顺序关系
  2. 字符串是不可变的序列,列表是可变的序列
  3. 字符串中每个元素只能存储字符,而列表可以存储任意类型
     的元素
  4. 列表和字符串都是可迭代对象

字符串的文本解析方法 split 和 join
  S.split(sep=None) 将字符串使用sep作用分隔符分割S字
            符串,返回分割 后的字符串列表,当不给定参数
            时,用空白字符作用为隔符进行分割
  S.join(iterable)  用可迭代对象中的字符串,返回一个
            中间用S进行分隔的字符串

  示例:
    s = 'Beijing is capital'
    L = s.split(' ')  # L = ['Beijing', 'is', 'capital']
    L = ['C:', 'Windows', 'System32']
    s = '\\'.join(L)   # s = r'C:\Windows\System32'

练习:
  有字符串 "hello", 用这个字符串生成:
     'h e l l o'  和 'h-e-l-l-o'

  答案:
    s = 'hello'
    s1 = ' '.join(s)
    s2 = '-'.join(s)
    print(s1, s2)


列表推导式 list comprehension
  列表推导式是用可迭代对象创建列表的表达式
  作用:
    用简易方法生成列表
  语法:
    [ 表达式 for 变量 in 可迭代对象 ]
    或
    [ 表达式 for 变量 in 可迭代对象 if 真值表达式]
  说明:
    if 子句部分可以省略,省略后将对所有生成的对象进行处理
    如果if真值表达式的布尔值为False,则可迭代对象生成的
    数据将被丢弃
  示例:
    # 以下生成一个数值为 1 ~ 9之间整数的平方的列表
    L = [ x**2 for x in range(1, 10)]  # L = [1, 4, 9, 16, ... 81]
    # 等同于:
    L = []
    for x in range(1, 10):
        L.append(x ** 2)
  练习:
    用列表推导式生成 1 ~ 100 以内奇数的列表
    结果[1, 3, 5, 7, 9 .... 99]
  答案:
    L = [x for x in range(1, 100, 2)]

  示例2:
    以下生成1个数值在 1~9之间的奇数的平方的列表
    L = [x**2 for x in range(1, 9) if x % 2 == 1]
    等同于:
    L = []
    for x in range(1, 9):
        if x % 2 == 1:
            L.append(x ** 2)

练习:
 1. 输入一个开始的整数用begin绑定
    输入一个结束的整数用end绑定
    将从begin开始,到end结束的所有偶数存于列表中,并打印这
    个列表
    (建议用列表推导式实现) 
  2. 写程序,让用户输入很多个整数(包含正整数和负整数) 保存在
    列表L 中,输入0时结束输入,
      1. 把列表L中所有的正整数存于L2列表中
      2. 把列表L中所有的负整数存于L3列表中
    打印原列表L, 正整数列表L2 和 负整数列表 L3


列表推导式嵌套
  语法:
    [ 表达式 for 变量1 in 可迭代对象 if 真值表达式1
        for 变量2 in 可迭代对象2 if 真值表达式2
           ...

          ]
  示例:
    将列表[10, 20, 30] 中的元素与 列表[1, 2, 3]分别
    相加,将得到的数据放于一个列表中
    L = [x + y for x in [10, 20, 30]
            for y in [1,2,3]]
    等同于:
    L = []
    for x in [10, 20, 30]:
        for y in [1, 2, 3]:
            L.append(x + y)

练习:
  1. 用字符串"ABC" 和 "123" 生成如下列表:
  ['A1', 'A2', 'A3',
   'B1', 'B2', 'B3',
   'C1', 'C2', 'C3']
 
  2. 已知有一个字符串:
     s = "100,200,800,500,300" 
     将其转化为列表，列表内都为整数:
     L = [100, 200, 800, 500, 300]
     求出L列表内部所有数字的和


练习:
  1. 有一些数存在于列表中,如:
    L = [1, 3, 2, 1, 6, 4, 2, .... 98, 82]
     1) 将列表中出现的数字存入另一个列表L2中
   　　　要求:
           重复出现多次的数字，只在L2列表中保留一份(去重)
     2) 将列表中出现两次的数字存于列表L3中，在L3中只保留
   　　  一份

   2. 计算出100以内的全部素数，将这些素数存于列表中.
     最后打印出这些素数

   3. 生成前40 个斐波那契数(Fibonacci)
      1   1   2   3   5   8  13  ...
      要求，将这些数保存在列表中
      　最后打印出这些数
